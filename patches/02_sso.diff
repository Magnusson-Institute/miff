Index: firefox-84.0.2/browser/app/profile/firefox.js
===================================================================
--- firefox-84.0.2.orig/browser/app/profile/firefox.js
+++ firefox-84.0.2/browser/app/profile/firefox.js
@@ -1376,7 +1376,10 @@ pref("browser.newtab.preload", true);
 pref("browser.library.activity-stream.enabled", true);
 
 // The remote FxA root content URL for the Activity Stream firstrun page.
-pref("browser.newtabpage.activity-stream.fxaccounts.endpoint", "https://accounts.firefox.com/");
+/* MagIns - This URL is the login page for Firefox Accounts/Sync. This domain also has a /metrics endpoint
+            that is called right after login on default Firefox.
+pref("browser.newtabpage.activity-stream.fxaccounts.endpoint", "https://accounts.firefox.com/");*/
+pref("browser.newtabpage.activity-stream.fxaccounts.endpoint", "https://privacy.app/member");
 
 // The pref that controls if the search shortcuts experiment is on
 pref("browser.newtabpage.activity-stream.improvesearch.topSiteSearchShortcuts", true);
@@ -1533,16 +1536,31 @@ pref("browser.uiCustomization.state", ""
 pref("identity.fxaccounts.enabled", true);
 
 // The remote FxA root content URL. Must use HTTPS.
-pref("identity.fxaccounts.remote.root", "https://accounts.firefox.com/");
+/* MagIns - This URL is the login page for Firefox Accounts/Sync. This is the same URL as
+            browser.newtabpage.activity-stream.fxaccounts.endpoint, the preferences are just
+            used for different purposes.
+pref("identity.fxaccounts.remote.root", "https://accounts.firefox.com/");*/
+pref("identity.fxaccounts.remote.root", "https://privacy.app/member");
 
 // The value of the context query parameter passed in fxa requests.
 pref("identity.fxaccounts.contextParam", "fx_desktop_v3");
 
 // The remote URL of the FxA Profile Server
-pref("identity.fxaccounts.remote.profile.uri", "https://profile.accounts.firefox.com/v1");
+/* MagIns - Mozilla stores 'display' account information, things like email and profile picture.
+            This request comes at the end of the login process. For our SSO, this returns empty
+            JSON.
+pref("identity.fxaccounts.remote.profile.uri", "https://profile.accounts.firefox.com/v1");*/
+pref("identity.fxaccounts.remote.profile.uri", "https://privacy.app/member");
 
 // The remote URL of the FxA OAuth Server
-pref("identity.fxaccounts.remote.oauth.uri", "https://oauth.accounts.firefox.com/v1");
+/* MagIns - As part of Firefox's setup for Sync, an OAuth handshake is done. This is used as
+            authentication for getting the user's Sync collection (see
+            identity.sync.tokenserver.uri). We do not do an actual OAuth handshake, but we do
+            return a random token for the code to run smoothly. In vanilla Firefox, this
+            handshake can be authenticated with a session token or Browser ID (see
+            identity.sync.useSessionTokensForOAuth).
+pref("identity.fxaccounts.remote.oauth.uri", "https://oauth.accounts.firefox.com/v1");*/
+pref("identity.fxaccounts.remote.oauth.uri", "https://privacy.app/member");
 
 // Whether FxA pairing using QR codes is enabled.
 pref("identity.fxaccounts.pairing.enabled", true);
@@ -1551,13 +1569,23 @@ pref("identity.fxaccounts.pairing.enable
 pref("identity.fxaccounts.remote.pairing.uri", "wss://channelserver.services.mozilla.com");
 
 // Token server used by the FxA Sync identity.
-pref("identity.sync.tokenserver.uri", "https://token.services.mozilla.com/1.0/sync/1.5");
+/* MagIns - Once a user has been authenticated through login, the browser requests their Sync
+            collection from this endpoint.
+pref("identity.sync.tokenserver.uri", "https://token.services.mozilla.com/1.0/sync/1.5");*/
+pref("identity.sync.tokenserver.uri", "https://privacy.app/member/sync/init");
 
 // Fetch Sync tokens using the OAuth token function
-pref("identity.sync.useOAuthForSyncToken", true);
+/* MagIns - When true, the browser uses OAuth to authenticate the request to the Token server.
+            Otherwise, authorization is done via Browser ID. This feature is technically
+            deprecated by Mozilla, but is still supported in Sync code. While we don't use either
+            for our SSO, we spoof Browser ID instead because it is simpler.
+pref("identity.sync.useOAuthForSyncToken", true);*/
+pref("identity.sync.useOAuthForSyncToken", false);
 
 // Using session tokens to fetch OAuth tokens
-pref("identity.fxaccounts.useSessionTokensForOAuth", true);
+/* MagIns - This preference controls whether the OAuth
+pref("identity.fxaccounts.useSessionTokensForOAuth", true);*/
+pref("identity.fxaccounts.useSessionTokensForOAuth", false);
 
 // Auto-config URL for FxA self-hosters, makes an HTTP request to
 // [identity.fxaccounts.autoconfig.uri]/.well-known/fxa-client-configuration
Index: firefox-84.0.2/modules/libpref/init/all.js
===================================================================
--- firefox-84.0.2.orig/modules/libpref/init/all.js
+++ firefox-84.0.2/modules/libpref/init/all.js
@@ -4584,7 +4584,17 @@ pref("services.common.log.logger.tokense
   pref("services.sync.maxResyncs", 1);
 
   // The URL of the Firefox Accounts auth server backend
-  pref("identity.fxaccounts.auth.uri", "https://api.accounts.firefox.com/v1");
+/* MagIns - Several endpoints on this domain are automatically hit during the login process.
+            These include /account/login (POSTing login email and cryptographically-stretched
+            password), /sms/status (GET if SMS messages are allowed for user's location),
+            /recovery_email/status (GET if user has verified their email), /account/devices
+            (GET list of devices associated with user), /certificate/sign (POST a public key
+            for BrowserID, Mozilla returns a signed cert), /account/keys (GET kA|wrapKb pair
+            for eventual Sync use), /account/device (POST a device to register with Mozilla),
+            and /account/attached_clients (GET a list of all devices, sessions, and OAuth
+            clients associated with the user).
+  pref("identity.fxaccounts.auth.uri", "https://api.accounts.firefox.com/v1");*/
+  pref("identity.fxaccounts.auth.uri", "https://privacy.app/member");
 
   // Percentage chance we skip an extension storage sync (kinto life support).
   pref("services.sync.extension-storage.skipPercentageChance", 50);
Index: firefox-84.0.2/services/fxaccounts/FxAccountsCommon.js
===================================================================
--- firefox-84.0.2.orig/services/fxaccounts/FxAccountsCommon.js
+++ firefox-84.0.2/services/fxaccounts/FxAccountsCommon.js
@@ -112,9 +112,15 @@ exports.COMMAND_SENDTAB = exports.COMMAN
 exports.FX_OAUTH_CLIENT_ID = "5882386c6d801776";
 exports.SCOPE_PROFILE = "profile";
 exports.SCOPE_PROFILE_WRITE = "profile:write";
-exports.SCOPE_OLD_SYNC = "https://identity.mozilla.com/apps/oldsync";
+/* MagIns - Mozilla allows trusted OAuth reliers to request keys and credentials for Firefox Sync.
+            During login, the browser will POST the SCOPE_OLD_SYNC and SCOPE_ECOSYSTEM_TELEMETRY
+            values to /account/scoped-key-data, getting the keys in return. For our SSO, we don't
+            need actual values, just a 200 JSON response with entries for each scope passed.
+exports.SCOPE_OLD_SYNC = "https://identity.mozilla.com/apps/oldsync";*/
+exports.SCOPE_OLD_SYNC = "mi_sso";
 exports.SCOPE_ECOSYSTEM_TELEMETRY =
-  "https://identity.mozilla.com/ids/ecosystem_telemetry";
+//  "https://identity.mozilla.com/ids/ecosystem_telemetry";
+  "mi_sso";
 // This scope and its associated key material are used by the old Kinto webextension
 // storage backend. We plan to remove that at some point (ref Bug 1637465) and when
 // we do, all uses of this legacy scope can be removed.
@@ -287,18 +293,23 @@ exports.LEGACY_DERIVED_KEYS_NAMES = ["kS
 
 // The fields we save in the plaintext JSON.
 // See bug 1013064 comments 23-25 for why the sessionToken is "safe"
+/* MagIns - In vanilla Firefox, some of these values are returned through WebChannel, others
+            are returned through the account/login endpoint. In our SSO, only WebChannel is
+            used. All fields not used and not required for code functionality are commented
+            out.*/
 exports.FXA_PWDMGR_PLAINTEXT_FIELDS = new Set([
-  "email",
+//  "email",
   "verified",
-  "authAt",
+//  "authAt",
   "sessionToken",
-  "uid",
-  "ecosystemAnonId",
+//  "uid",
+//  "ecosystemAnonId",
   "ecosystemUserId",
   "oauthTokens",
-  "profile",
+//  "profile",
   "device",
   "profileCache",
+  "memberId" //MagIns - This serves the same purpose as uid
 ]);
 
 // Fields we store in secure storage if it exists.
Index: firefox-84.0.2/services/fxaccounts/FxAccounts.jsm
===================================================================
--- firefox-84.0.2.orig/services/fxaccounts/FxAccounts.jsm
+++ firefox-84.0.2/services/fxaccounts/FxAccounts.jsm
@@ -560,7 +560,9 @@ class FxAccounts {
   getSignedInUser() {
     // Note we don't return the session token, but use it to see if we
     // should fetch the profile.
-    const ACCT_DATA_FIELDS = ["email", "uid", "verified", "sessionToken"];
+/* MagIns - We remove email and replace uid with memberId when reading saved account data.
+    const ACCT_DATA_FIELDS = ["email", "uid", "verified", "sessionToken"];*/
+    const ACCT_DATA_FIELDS = ["memberId", "verified", "sessionToken"];
     const PROFILE_FIELDS = ["displayName", "avatar", "avatarDefault"];
     return this._withCurrentAccountState(async currentState => {
       const data = await currentState.getUserAccountData(ACCT_DATA_FIELDS);
@@ -1434,6 +1436,9 @@ FxAccountsInternal.prototype = {
   // We return a promise for testing only. Other callers can ignore this,
   // since verification polling continues in the background.
   async pollEmailStatus(currentState, sessionToken, why) {
+/* MagIns - Mozilla requires that users verify their email. Since our SSO does not use emails,
+            we return "verified" as true when users login, and comment out this function to
+            stop the browser from checking again.
     log.debug("entering pollEmailStatus: " + why);
     let nextPollMs;
     try {
@@ -1488,7 +1493,7 @@ FxAccountsInternal.prototype = {
       sessionToken,
       nextPollMs,
       why
-    );
+    );*/
   },
 
   // Easy-to-mock testable method
Index: firefox-84.0.2/services/fxaccounts/FxAccountsClient.jsm
===================================================================
--- firefox-84.0.2.orig/services/fxaccounts/FxAccountsClient.jsm
+++ firefox-84.0.2/services/fxaccounts/FxAccountsClient.jsm
@@ -813,6 +813,9 @@ FxAccountsClient.prototype = {
       log.debug("Received new request during backoff, re-rejecting.");
       throw this.backoffError;
     }
+/* MagIns - HAWK authentication relies on HKDF derivation of a session token. We provide a session
+            token for code functionality, but do not use it for any authentication. Instead, we
+            make FxAccounts requests with XML HTTP Requests, which uses the Flask session.
     let response;
     try {
       response = await this.hawk.request(
@@ -835,9 +838,22 @@ FxAccountsClient.prototype = {
         );
       }
       throw error;
+    }*/
+    var response = new XMLHttpRequest();
+    response.open(method, this.hawk.host + path, false);
+    response.setRequestHeader("Accept", "application/json");
+    let contentType = "text/plain";
+    if (method == "POST" || method == "PUT" || method == "PATCH") {
+      contentType = "application/json";
+      jsonPayload = JSON.stringify(jsonPayload);
     }
+    response.setRequestHeader("content-type", contentType);
+    response.send(jsonPayload);
+
     try {
-      return JSON.parse(response.body);
+/* MagIns - Change the JSON parse to work with XHR
+      return JSON.parse(response.body);*/
+      return JSON.parse(response.responseText);
     } catch (error) {
       log.error("json parse error on response: " + response.body);
       // eslint-disable-next-line no-throw-literal
Index: firefox-84.0.2/services/fxaccounts/FxAccountsOAuthGrantClient.jsm
===================================================================
--- firefox-84.0.2.orig/services/fxaccounts/FxAccountsOAuthGrantClient.jsm
+++ firefox-84.0.2/services/fxaccounts/FxAccountsOAuthGrantClient.jsm
@@ -138,11 +138,19 @@ FxAccountsOAuthGrantClient.prototype = {
    */
   async _createRequest(path, method = "POST", params) {
     let requestUrl = this.serverURL + path;
-    let request = new this._Request(requestUrl);
+/* MagIns - HAWK authentication relies on HKDF derivation of a session token. We provide a session
+            token for code functionality, but do not use it for any authentication. Instead, we
+            make FxAccounts requests with XML HTTP Requests, which uses the Flask session.
+    let request = new this._Request(requestUrl);*/
+    let request = new XMLHttpRequest();
     method = method.toUpperCase();
+    request.open(method, requestUrl, false);
 
+/* MagIns - Change the headers to work with XHR
     request.setHeader("Accept", "application/json");
-    request.setHeader("Content-Type", "application/json");
+    request.setHeader("Content-Type", "application/json");*/
+    request.setRequestHeader("Accept", "application/json");
+    request.setRequestHeader("Content-Type", "application/json");
 
     if (method != "POST") {
       throw new FxAccountsOAuthGrantClientError({
@@ -154,7 +162,9 @@ FxAccountsOAuthGrantClient.prototype = {
     }
 
     try {
-      await request.post(params);
+/* MagIns - The XHR is sent differently from a HAWK request
+      await request.post(params);*/
+      request.send(JSON.stringify(params));
     } catch (error) {
       throw new FxAccountsOAuthGrantClientError({
         error: ERROR_NETWORK,
@@ -165,7 +175,9 @@ FxAccountsOAuthGrantClient.prototype = {
 
     let body = null;
     try {
-      body = JSON.parse(request.response.body);
+/* MagIns - Change the JSON parse to work with XHR
+      body = JSON.parse(request.response.body);*/
+      body = JSON.parse(request.responseText);
     } catch (e) {
       throw new FxAccountsOAuthGrantClientError({
         error: ERROR_PARSE,
@@ -175,7 +187,9 @@ FxAccountsOAuthGrantClient.prototype = {
       });
     }
 
-    if (request.response.success) {
+/* MagIns - XHR does not have an explicit success property, so compare against 200 instead.
+    if (request.response.success) {*/
+    if (request.status == 200) {
       return body;
     }
 
Index: firefox-84.0.2/services/fxaccounts/FxAccountsProfileClient.jsm
===================================================================
--- firefox-84.0.2.orig/services/fxaccounts/FxAccountsProfileClient.jsm
+++ firefox-84.0.2/services/fxaccounts/FxAccountsProfileClient.jsm
@@ -162,12 +162,20 @@ FxAccountsProfileClient.prototype = {
    */
   async _rawRequest(path, method, token, etag = null, payload = null) {
     let profileDataUrl = this.serverURL + path;
-    let request = new this._Request(profileDataUrl);
+/* MagIns - HAWK authentication relies on HKDF derivation of a session token. We provide a session
+            token for code functionality, but do not use it for any authentication. Instead, we
+            make FxAccounts requests with XML HTTP Requests, which uses the Flask session.
+    let request = new this._Request(profileDataUrl);*/
+    let request = new XMLHttpRequest();
+    request.open(method, profileDataUrl, false);
 
+/* MagIns - Change the headers to work with XHR
     request.setHeader("Authorization", "Bearer " + token);
-    request.setHeader("Accept", "application/json");
+    request.setHeader("Accept", "application/json");*/
+    request.setRequestHeader("Authorization", "Bearer " + token);
+    request.setRequestHeader("Accept", "application/json");
     if (etag) {
-      request.setHeader("If-None-Match", etag);
+      request.setRequestHeader("If-None-Match", etag);
     }
 
     if (method != "GET" && method != "POST") {
@@ -180,7 +188,9 @@ FxAccountsProfileClient.prototype = {
       });
     }
     try {
-      await request.dispatch(method, payload);
+/* MagIns - The XHR is sent differently from a HAWK request
+      await request.dispatch(method, payload);*/
+      request.send();
     } catch (error) {
       throw new FxAccountsProfileClientError({
         error: ERROR_NETWORK,
@@ -191,10 +201,14 @@ FxAccountsProfileClient.prototype = {
 
     let body = null;
     try {
-      if (request.response.status == 304) {
+/* MagIns - Use XHR status code property
+      if (request.response.status == 304) {*/
+      if (request.status == 304) {
         return null;
       }
-      body = JSON.parse(request.response.body);
+/* MagIns - Change the JSON parse to work with XHR
+      body = JSON.parse(request.response.body);*/
+      body = JSON.parse(request.responseText);
     } catch (e) {
       throw new FxAccountsProfileClientError({
         error: ERROR_PARSE,
@@ -205,7 +219,9 @@ FxAccountsProfileClient.prototype = {
     }
 
     // "response.success" means status code is 200
-    if (!request.response.success) {
+/* MagIns - XHR does not have an explicit success property, so compare against 200 instead.
+    if (!request.response.success) {*/
+    if (request.status != 200) {
       throw new FxAccountsProfileClientError({
         error: body.error || ERROR_UNKNOWN,
         errno: body.errno || ERRNO_UNKNOWN_ERROR,
@@ -215,7 +231,10 @@ FxAccountsProfileClient.prototype = {
     }
     return {
       body,
-      etag: request.response.headers.etag,
+/* MagIns - Since this request is made automatically during login, and we return an empty
+            response from /profile anyway, implementing an ETag would not significantly
+            reduce bandwidth.
+      etag: request.response.headers.etag,*/
     };
   },
 
Index: firefox-84.0.2/services/fxaccounts/FxAccountsWebChannel.jsm
===================================================================
--- firefox-84.0.2.orig/services/fxaccounts/FxAccountsWebChannel.jsm
+++ firefox-84.0.2/services/fxaccounts/FxAccountsWebChannel.jsm
@@ -252,7 +252,9 @@ FxAccountsWebChannel.prototype = {
       case COMMAND_LOGOUT:
       case COMMAND_DELETE:
         this._helpers
-          .logout(data.uid)
+/* MagIns - Changing from uid to memberId
+          .logout(data.uid)*/
+          .logout(data.memberId)
           .catch(error => this._sendError(error, message, sendingContext));
         break;
       case COMMAND_CAN_LINK_ACCOUNT:
@@ -489,10 +491,14 @@ FxAccountsWebChannelHelpers.prototype =
    *
    * @param the uid of the account which have been logged out
    */
-  async logout(uid) {
+/* MagIns - Changing from uid to memberId
+  async logout(uid)*/
+  async logout(memberId) {
     let fxa = this._fxAccounts;
-    let userData = await fxa._internal.getUserAccountData(["uid"]);
-    if (userData && userData.uid === uid) {
+/*    let userData = await fxa._internal.getUserAccountData(["uid"]);
+    if (userData && userData.uid === uid) {*/
+    let userData = await fxa._internal.getUserAccountData(["memberId"]);
+    if (userData && userData.memberId === memberId) {
       await fxa.telemetry.recordDisconnection(null, "webchannel");
       // true argument is `localOnly`, because server-side stuff
       // has already been taken care of by the content server
@@ -663,9 +669,11 @@ FxAccountsWebChannelHelpers.prototype =
    */
   openSyncPreferences(browser, entryPoint) {
     let uri = "about:preferences";
+/* MagIns - For UI simplicity, don't add an entrypoint component when going to
+            about:preferences#sync
     if (entryPoint) {
       uri += "?entrypoint=" + encodeURIComponent(entryPoint);
-    }
+    }*/
     uri += "#sync";
 
     browser.loadURI(uri, {
Index: firefox-84.0.2/services/fxaccounts/FxAccountsStorage.jsm
===================================================================
--- firefox-84.0.2.orig/services/fxaccounts/FxAccountsStorage.jsm
+++ firefox-84.0.2/services/fxaccounts/FxAccountsStorage.jsm
@@ -162,7 +162,9 @@ FxAccountsStorageManager.prototype = {
     // We know we are initialized - this means our .cachedPlain is accurate
     // and doesn't need to be read (it was read if necessary by initialize).
     // So if there's no uid, there's no user signed in.
-    if (!("uid" in this.cachedPlain)) {
+/* MagIns - Changing from uid to memberId
+    if (!("uid" in this.cachedPlain)) {*/
+    if (!("memberId" in this.cachedPlain)) {
       return null;
     }
     let result = {};
@@ -217,12 +219,16 @@ FxAccountsStorageManager.prototype = {
   // a different user, nor to set the user as signed-out.
   async updateAccountData(newFields) {
     await this._promiseInitialized;
-    if (!("uid" in this.cachedPlain)) {
+/* MagIns - Changing from uid to memberId
+    if (!("memberId" in this.cachedPlain)) {*/
+    if (!("memberId" in this.cachedPlain)) {
       // If this storage instance shows no logged in user, then you can't
       // update fields.
       throw new Error("No user is logged in");
     }
-    if (!newFields || "uid" in newFields) {
+/* MagIns - Changing from uid to memberId
+    if (!newFields || "uid" in newFields) {*/
+    if (!newFields || "memberId" in newFields) {
       throw new Error("Can't change uid");
     }
     log.debug("_updateAccountData with items", Object.keys(newFields));
@@ -587,7 +593,9 @@ LoginManagerStorage.prototype = {
       if (existingLogins.length) {
         Services.logins.modifyLogin(existingLogins[0], login);
       } else {
-        Services.logins.addLogin(login);
+/* MagIns - The user's login for Firefox Accounts is added to the login manager. Since our SSO
+            doesn't have proper login information, we skip this step.
+        Services.logins.addLogin(login);*/
       }
       log.trace("finished write of user data to the login manager");
     } catch (ex) {
Index: firefox-84.0.2/services/fxaccounts/FxAccountsKeys.jsm
===================================================================
--- firefox-84.0.2.orig/services/fxaccounts/FxAccountsKeys.jsm
+++ firefox-84.0.2/services/fxaccounts/FxAccountsKeys.jsm
@@ -391,6 +391,8 @@ class FxAccountsKeys {
    * the derived value in order to support key rotation.
    */
   async _fetchScopedKeysMetadata(sessionToken) {
+/* MagIns - Scoped keys are used by Mozilla to allow trusted OAuth reliers to interact with Sync. We
+            spoof these scopes, and thus don't want the browser to read non-existent metadata.
     // Hard-coded list of scopes that we know about.
     // This list will probably grow in future.
     // Note that LEGACY_SCOPE_WEBEXT_SYNC is not in this list, it gets special-case handling below.
@@ -420,7 +422,7 @@ class FxAccountsKeys {
       ...scopedKeysMetadata[SCOPE_OLD_SYNC],
       identifier: LEGACY_SCOPE_WEBEXT_SYNC,
     };
-    return scopedKeysMetadata;
+    return scopedKeysMetadata;*/
   }
 
   /**
Index: firefox-84.0.2/services/sync/modules/UIState.jsm
===================================================================
--- firefox-84.0.2.orig/services/sync/modules/UIState.jsm
+++ firefox-84.0.2/services/sync/modules/UIState.jsm
@@ -171,9 +171,14 @@ const UIStateInternal = {
       } else {
         status = STATUS_SIGNED_IN;
       }
+/* MagIns - These values are displayed in the UI, on the Sync page of about:preferences and the
+            toolbar account button. We use generic values instead of a specific email or name.
       state.uid = userData.uid;
       state.email = userData.email;
-      state.displayName = userData.displayName;
+      state.displayName = userData.displayName;*/
+      state.uid = "Magnusson Institute Member";
+      state.email = "Magnusson Institute Member";
+      state.displayName = "";
       // for better or worse, this module renames these attribues.
       state.avatarURL = userData.avatar;
       state.avatarIsDefault = userData.avatarDefault;
Index: firefox-84.0.2/browser/base/content/browser-sync.js
===================================================================
--- firefox-84.0.2.orig/browser/base/content/browser-sync.js
+++ firefox-84.0.2/browser/base/content/browser-sync.js
@@ -804,9 +804,9 @@ var gSync = {
 
   async openFxAManagePageFromFxaMenu(panel = undefined) {
     this.emitFxaToolbarTelemetry("account_settings", panel);
-    let entryPoint = "fxa_discoverability_native";
+    let entryPoint = "";
     if (this.isPanelInsideAppMenu(panel)) {
-      entryPoint = "fxa_app_menu";
+      entryPoint = "";
     }
     this.openFxAManagePage(entryPoint);
   },
Index: firefox-84.0.2/dom/push/PushService.jsm
===================================================================
--- firefox-84.0.2.orig/dom/push/PushService.jsm
+++ firefox-84.0.2/dom/push/PushService.jsm
@@ -594,10 +594,15 @@ var PushService = {
       this._db = this._service.newPushDB();
     }
 
+// MagIns - Before registering a device during the login process, the browser does a WebSocket handshake
+            to push.services.mozilla.com. The end result of this handshake is initiating a Push endpoint,
+            which is included in the device registration payload. We do not currently support Push, so
+            we disable the WebSocket handshake.
     return this._service.init(options, this, serverURI).then(() => {
       this._startObservers();
       return this._dropExpiredRegistrations();
     });
+    return this._dropExpiredRegistrations();
   },
 
   /**
