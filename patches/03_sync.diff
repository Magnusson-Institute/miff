Index: mozilla-release/services/common/tokenserverclient.sys.mjs
===================================================================
--- mozilla-release.orig/services/common/tokenserverclient.sys.mjs
+++ mozilla-release/services/common/tokenserverclient.sys.mjs
@@ -219,29 +219,44 @@ TokenServerClient.prototype = {
       );
     }
 
+/* MagIns - By default, Firefox uses OAuth tokens to authenticate the request for a user's
++            sync collection endpoint. Since we don't implement OAuth for this, we use XML
++            HTTP Requests and authenticate with the Flask session.
     let req = this.newRESTRequest(url);
     req.setHeader("Accept", "application/json");
-    req.setHeader("Authorization", authorizationHeader);
+    req.setHeader("Authorization", authorizationHeader);*/
+    let req = new XMLHttpRequest();
+    req.open("GET", url, false);
+    req.setRequestHeader("Accept", "application/json");
+    req.setRequestHeader("Authorization", authorizationHeader);
 
     for (let header in addHeaders) {
-      req.setHeader(header, addHeaders[header]);
+/* MagIns - Change the headers to work with XHR
+      req.setHeader(header, addHeaders[header]);*/
+      req.setRequestHeader(header, addHeaders[header]);
     }
-    let response;
+//    let response;
     try {
-      response = await req.get();
+/* MagIns - The XHR is sent differently from a REST request
+      response = await req.get();*/
+      req.send();
     } catch (err) {
       throw new TokenServerClientNetworkError(err);
     }
 
     try {
-      return this._processTokenResponse(response);
+/* MagIns - XHR responses are not saved as a different variable
+      return this._processTokenResponse(response);*/
+      return this._processTokenResponse(req);
     } catch (ex) {
       if (ex instanceof TokenServerClientServerError) {
         throw ex;
       }
       this._log.warn("Error processing token server response", ex);
       let error = new TokenServerClientError(ex);
-      error.response = response;
+/* MagIns - XHR responses are not saved as a different variable
+      error.response = response;*/
+      error.response = req.responseText;
       throw error;
     }
   },
@@ -257,7 +272,9 @@ TokenServerClient.prototype = {
 
     // Responses should *always* be JSON, even in the case of 4xx and 5xx
     // errors. If we don't see JSON, the server is likely very unhappy.
-    let ct = response.headers["content-type"] || "";
+/* MagIns - Get the headers differently to work with XHR
+    let ct = response.headers["content-type"] || "";*/
+    let ct = response.getResponseHeader("content-type") || "";
     if (ct != "application/json" && !ct.startsWith("application/json;")) {
       this._log.warn("Did not receive JSON response. Misconfigured server?");
       this._log.debug("Content-Type: " + ct);
@@ -273,7 +290,9 @@ TokenServerClient.prototype = {
 
     let result;
     try {
-      result = JSON.parse(response.body);
+/* MagIns - Change the JSON parse to work with XHR
+      result = JSON.parse(response.body);*/
+      result = JSON.parse(response.responseText);
     } catch (ex) {
       this._log.warn("Invalid JSON returned by server: " + response.body);
       let error = new TokenServerClientServerError(
@@ -361,7 +380,9 @@ TokenServerClient.prototype = {
     if (!this.observerPrefix) {
       return;
     }
-    let headerVal = response.headers[headerName];
+/* MagIns - Get the headers differently to work with XHR
+    let headerVal = response.headers[headerName];*/
+    let headerVal = response.getResponseHeader(headerName);
     if (!headerVal) {
       return;
     }
Index: mozilla-release/services/fxaccounts/FxAccountsClient.sys.mjs
===================================================================
--- mozilla-release.orig/services/fxaccounts/FxAccountsClient.sys.mjs
+++ mozilla-release/services/fxaccounts/FxAccountsClient.sys.mjs
@@ -425,11 +425,18 @@ FxAccountsClient.prototype = {
       key,
       CommonUtils.byteStringToArrayBuffer(bundle.slice(0, -32))
     );
+/* MagIns - Firefox stores a user's key B as doubly-wrapped. The bundle is unwrapped once on
+            Mozilla servers after login, concatenated with the key A value, and sent to the
+            user's browser. In transit, this is wrapped with values derived from the keyFetchToken.
+            In our current Flask implementation, we only generate a keyFetchToken for code
+            compatibility, and do not save it for later use. Thus, we do not wrap the key in
+            transit, and cannot compare MAC values.
     if (mac !== CommonUtils.arrayBufferToByteString(bundleMAC)) {
       throw new Error("error unbundling encryption keys");
     }
 
-    let keyAWrapB = CryptoUtils.xor(respXORKey, bundle.slice(0, 64));
+    let keyAWrapB = CryptoUtils.xor(respXORKey, bundle.slice(0, 64));*/
+    let keyAWrapB = bundle.slice(0, 64));
 
     return {
       kA: keyAWrapB.slice(0, 32),
Index: mozilla-release/services/fxaccounts/FxAccountsKeys.sys.mjs
===================================================================
--- mozilla-release.orig/services/fxaccounts/FxAccountsKeys.sys.mjs
+++ mozilla-release/services/fxaccounts/FxAccountsKeys.sys.mjs
@@ -358,10 +358,15 @@ export class FxAccountsKeys {
       throw new Error("Signed in user changed while fetching keys!");
     }
 
+/* MagIns - Firefox stores a user's key B as doubly-wrapped. The bundle is unwrapped once on
+            Mozilla servers after login, concatenated with the key A value, and sent to the
+            user's browser. These wrappers are based on a email/password comination, and thus
+            are not implemented in our SSO.
     let kBbytes = CryptoUtils.xor(
       CommonUtils.hexToBytes(data.unwrapBKey),
       wrapKB
-    );
+    );*/
+    let kBbytes = wrapKB;
 
     if (logPII) {
       log.debug("kBbytes: " + kBbytes);
Index: mozilla-release/services/sync/modules/resource.sys.mjs
===================================================================
--- mozilla-release.orig/services/sync/modules/resource.sys.mjs
+++ mozilla-release/services/sync/modules/resource.sys.mjs
@@ -96,12 +96,28 @@ Resource.prototype = {
    * @returns {Headers}
    */
   async _buildHeaders(method) {
+/* MagIns - With the original functionality, all the headers for Sync data requests are added
+            to a Headers object (extension of Map) and returned to _createRequest to be used
+            in a Request() constructor call. Since the XML HTTP Request is constructed
+            differently, create the request here, add the headers to the request, and return
+            the request instead.
     const headers = new Headers(this._headers);
 
     if (Resource.SEND_VERSION_INFO) {
       headers.append("user-agent", Utils.userAgent);
+    }*/
+const syncRequest = new XMLHttpRequest();
+    syncRequest.open(method, this.uri.spec, false);
+    try{
+      for (var h in this._headers){
+        syncRequest.setRequestHeader(h, this._headers[h]);
+      }
+    } catch (ex) {
+      console.error("Failed to add a header for this resource", this._headers);
     }
+    syncRequest.setRequestHeader("user-agent", Utils.userAgent);
 
+/* MagIns - We use the Flask session for authentication, so we don't add this header.
     if (this.authenticator) {
       const result = await this.authenticator(this, method);
       if (result && result.headers) {
@@ -111,11 +127,14 @@ Resource.prototype = {
       }
     } else {
       this._log.debug("No authenticator found.");
-    }
+    }*/
 
     // PUT and POST are treated differently because they have payload data.
+/* MagIns - Get the headers differently to work with XHR
     if (("PUT" == method || "POST" == method) && !headers.has("content-type")) {
-      headers.append("content-type", "text/plain");
+      headers.append("content-type", "text/plain");*/
+    if (("PUT" == method || "POST" == method) && !this._headers["content-type"]) {
+      syncRequest.setRequestHeader("content-type", "application/json");
     }
 
     if (this._log.level <= Log.Level.Trace) {
@@ -128,11 +147,16 @@ Resource.prototype = {
       }
     }
 
-    if (!headers.has("accept")) {
-      headers.append("accept", "application/json;q=0.9,*/*;q=0.2");
+// MagIns - Get the headers differently to work with XHR
+//    if (!headers.has("accept")) {
+//      headers.append("accept", "application/json;q=0.9,*/*;q=0.2");
+//    }
+    if (!this._headers["accept"]) {
+      syncRequest.setRequestHeader("accept", "application/json;q=0.9,*/*;q=0.2");
     }
 
-    return headers;
+//    return headers;
+    return syncRequest;
   },
 
   /**
@@ -142,6 +166,7 @@ Resource.prototype = {
    * @returns {Request}
    */
   async _createRequest(method, data, signal) {
+/* MagIns - Since we initated the XHR in _buildHeaders, we don't need to do any init stuff here
     const headers = await this._buildHeaders(method);
     const init = {
       cache: "no-store", // No cache.
@@ -150,8 +175,10 @@ Resource.prototype = {
       signal,
       mozErrors: true, // Return nsresult error codes instead of a generic
       // NetworkError when fetch rejects.
-    };
+    };*/
+    const syncRequest = await this._buildHeaders(method);
 
+/* MagIns - In order to JSONify the body and add a timeout function, move this section to _doRequest
     if (data) {
       if (!(typeof data == "string" || data instanceof String)) {
         data = JSON.stringify(data);
@@ -161,7 +188,11 @@ Resource.prototype = {
       init.body = data;
     }
     return new Request(this.uri.spec, init);
-  },
+  },*/
+  /* MagIns - Change the return statement
+    return new Request(this.uri.spec, init);*/
+    return syncRequest;
+   },
 
   /**
    * @param {string} method HTTP method
@@ -172,17 +203,38 @@ Resource.prototype = {
     const controller = new AbortController();
     const request = await this._createRequest(method, data, controller.signal);
     const responsePromise = fetch(request); // Rejects on network failure.
+// MagIns - Moving the data manipulation here from _createRequest
+    if (data) {
+      if (!(typeof data == "string" || data instanceof String)) {
+        data = JSON.stringify(data);
+      }
+      this._log.debug(`${method} Length: ${data.length}`);
+      this._log.trace(`${method} Body: ${data}`);
+/* MagIns - init is not defined in _doRequest and we don't use it anyway
+      init.body = data;*/
+    }
+/* MagIns - Send the request as XHR instead
+    const responsePromise = fetch(request); // Rejects on network failure.*/
     let didTimeout = false;
-    const timeoutId = setTimeout(() => {
+/* MagIns - XHR uses different syntax for timeouts
+    const timeoutId = setTimeout(() => {*/
+    request.timeout = this.ABORT_TIMEOUT;
+    request.ontimeout = function() {
       didTimeout = true;
       this._log.error(
         `Request timed out after ${this.ABORT_TIMEOUT}ms. Aborting.`
       );
+/* MagIns - Since the controller isn't used with XHR, throw an exception instead
       controller.abort();
-    }, this.ABORT_TIMEOUT);
+    }, this.ABORT_TIMEOUT);*/
+    throw 'XHR Timeout';
+    };
+/* MagIns - The XHR is sent differently from a REST request
     let response;
     try {
-      response = await responsePromise;
+      response = await responsePromise;*/
+    try {
+      request.send(data);
     } catch (e) {
       this._log.warn(`${method} request to ${this.uri.spec} failed`, e);
       if (!didTimeout) {
@@ -192,25 +244,43 @@ Resource.prototype = {
         "Request aborted (timeout)",
         Cr.NS_ERROR_NET_TIMEOUT
       );
+/* MagIns - timoutId is not used with XHR
     } finally {
-      clearTimeout(timeoutId);
+      clearTimeout(timeoutId);*/
     }
-    return this._processResponse(response, method);
+/* MagIns - Change the return value
+    return this._processResponse(response, method);*/
+    return this._processResponse(request, method);
   },
 
   async _processResponse(response, method) {
-    const data = await response.text();
+/* MagIns - The XHR is complete before entering _processResponse
+    const data = await response.text();*/
+    const data = response.responseText;
     this._logResponse(response, method, data);
     this._processResponseHeaders(response);
+/* MagIns - XHR does not have an explicit ok property, so we create that here.*/
+    var ok;
+    if (response.status == 200){
+        ok = true;
+    } else { ok = false; }
 
     const ret = {
       data,
-      url: response.url,
+/* MagIns - The XHR url is saved under a different name
+      url: response.url,*/
+      url: response.responseUrl,
       status: response.status,
-      success: response.ok,
+/* MagIns - Use the ok variable from above
+      success: response.ok,*/
+      success: ok,
       headers: {},
     };
-    for (const [k, v] of response.headers) {
+/* MagIns - Get the headers differently to work with XHR
+    for (const [k, v] of response.headers) {*/
+    const headerStrings = response.getAllResponseHeaders().split("\r\n");
+    for (var h of headerStrings){
+      const [k, v] = h.split(": ");
       ret.headers[k] = v;
     }
 
@@ -254,22 +324,31 @@ Resource.prototype = {
     }
   },
 
-  _processResponseHeaders({ headers, ok: success }) {
+/* MagIns - The function call is unchanged, but the variable being sent is
+  _processResponseHeaders({ headers, ok: success }) {*/
+  _processResponseHeaders(headers) {
+/* MagIns - Read the headers differently to work with XHR
     if (headers.has("x-weave-timestamp")) {
-      Resource.serverTime = parseFloat(headers.get("x-weave-timestamp"));
+      Resource.serverTime = parseFloat(headers.get("x-weave-timestamp"));*/
+    if (headers.getResponseHeader("x-weave-timestamp") !== undefined) {
+      Resource.serverTime = parseFloat(headers.getResponseHeader("x-weave-timestamp"));
     }
     // This is a server-side safety valve to allow slowing down
     // clients without hurting performance.
-    if (headers.has("x-weave-backoff")) {
-      let backoff = headers.get("x-weave-backoff");
+/*  if (headers.has("x-weave-backoff")) {
+      let backoff = headers.get("x-weave-backoff");*/
+    if (headers.getResponseHeader("x-weave-backoff") !== undefined) {
+      let backoff = headers.getResponseHeader("x-weave-backoff");
       this._log.debug(`Got X-Weave-Backoff: ${backoff}`);
       Observers.notify("weave:service:backoff:interval", parseInt(backoff, 10));
     }
 
-    if (success && headers.has("x-weave-quota-remaining")) {
+//    if (success && headers.has("x-weave-quota-remaining")) {
+    if (headers.status == 200 && headers.getResponseHeader("x-weave-quota-remaining") !== undefined) {
       Observers.notify(
         "weave:service:quota:remaining",
-        parseInt(headers.get("x-weave-quota-remaining"), 10)
+//        parseInt(headers.get("x-weave-quota-remaining"), 10)
+        parseInt(headers.getResponseHeader("x-weave-quota-remaining"), 10)
       );
     }
   },
