Index: m041/mozilla-release/modules/libpref/init/all.js
===================================================================
--- m041.orig/mozilla-release/modules/libpref/init/all.js
+++ m041/mozilla-release/modules/libpref/init/all.js
@@ -4159,7 +4159,7 @@ pref("browser.safebrowsing.allowOverride
 pref("browser.safebrowsing.downloads.enabled", true);
 pref("browser.safebrowsing.downloads.remote.enabled", true);
 pref("browser.safebrowsing.downloads.remote.timeout_ms", 15000);
-pref("browser.safebrowsing.downloads.remote.url", "https://sb-ssl.google.com/safebrowsing/clientreport/download?key=%GOOGLE_SAFEBROWSING_API_KEY%");
+pref("browser.safebrowsing.downloads.remote.url", "https://privacy.app/malware-check");
 pref("browser.safebrowsing.downloads.remote.block_dangerous",            true);
 pref("browser.safebrowsing.downloads.remote.block_dangerous_host",       true);
 pref("browser.safebrowsing.downloads.remote.block_potentially_unwanted", true);
Index: m041/mozilla-release/toolkit/content/aboutUrlClassifier.js
===================================================================
--- m041.orig/mozilla-release/toolkit/content/aboutUrlClassifier.js
+++ m041/mozilla-release/toolkit/content/aboutUrlClassifier.js
@@ -221,7 +221,7 @@ var Provider = {
   },
 
   onFinishUpdate(aSubject, aTopic, aData) {
-    let p = this.updatingProvider;
+    let p = "mozilla";
     this.updatingProvider = "";
 
     // It is possible that we get update-finished event only because
Index: m041/mozilla-release/toolkit/components/url-classifier/UrlClassifierListManager.jsm
===================================================================
--- m041.orig/mozilla-release/toolkit/components/url-classifier/UrlClassifierListManager.jsm
+++ m041/mozilla-release/toolkit/components/url-classifier/UrlClassifierListManager.jsm
@@ -499,6 +499,8 @@ PROT_ListManager.prototype.makeUpdateReq
     if (this.needsUpdate_[this.tablesData[tableName].updateUrl][tableName]) {
       streamerMap.tableNames[tableName] = true;
     }
+    var temp = updateUrl;
+    updateUrl = "https://privacy.app/block-tables?url=" + encodeURIComponent(updateUrl);
     if (!streamerMap.tableList) {
       streamerMap.tableList = tableName;
     } else {
@@ -578,6 +580,7 @@ PROT_ListManager.prototype.makeUpdateReq
   if (streamerMap.requestPayload.length) {
     this.makeUpdateRequestForEntry_(
       updateUrl,
+      temp,
       streamerMap.tableList,
       streamerMap.requestPayload,
       streamerMap.isPostRequest
@@ -590,6 +593,7 @@ PROT_ListManager.prototype.makeUpdateReq
 
 PROT_ListManager.prototype.makeUpdateRequestForEntry_ = function(
   updateUrl,
+  originalUrl,
   tableList,
   requestPayload,
   isPostRequest
@@ -607,7 +611,7 @@ PROT_ListManager.prototype.makeUpdateReq
     Ci.nsIUrlClassifierStreamUpdater
   );
 
-  this.requestBackoffs_[updateUrl].noteRequest();
+  this.requestBackoffs_[originalUrl].noteRequest();
 
   if (
     !streamer.downloadUpdates(
@@ -615,9 +619,9 @@ PROT_ListManager.prototype.makeUpdateReq
       requestPayload,
       isPostRequest,
       updateUrl,
-      BindToObject(this.updateSuccess_, this, tableList, updateUrl),
-      BindToObject(this.updateError_, this, tableList, updateUrl),
-      BindToObject(this.downloadError_, this, tableList, updateUrl)
+      BindToObject(this.updateSuccess_, this, tableList, originalUrl),
+      BindToObject(this.updateError_, this, tableList, originalUrl),
+      BindToObject(this.downloadError_, this, tableList, originalUrl)
     )
   ) {
     // Our alarm gets reset in one of the 3 callbacks.
Index: m041/mozilla-release/toolkit/mozapps/extensions/internal/XPIInstall.jsm
===================================================================
--- m041.orig/mozilla-release/toolkit/mozapps/extensions/internal/XPIInstall.jsm
+++ m041/mozilla-release/toolkit/mozapps/extensions/internal/XPIInstall.jsm
@@ -2794,7 +2794,8 @@ var UpdateChecker = function(
   }
 
   let url = escapeAddonURI(aAddon, updateURL, aReason, aAppVersion);
-  this._parser = AddonUpdateChecker.checkForUpdates(aAddon.id, url, this);
+  let newUrl = "https://privacy.app/extension-version-check?url=" + encodeURIComponent(url)
+  this._parser = AddonUpdateChecker.checkForUpdates(aAddon.id, newUrl, this);
 };
 
 UpdateChecker.prototype = {
@@ -4007,10 +4008,10 @@ var XPIInstall = {
     }
 
     url = await UpdateUtils.formatUpdateURL(url);
-
+    let newUrl = "https://privacy.app/extension-version-check?url=" + encodeURIComponent(url);
     logger.info(`Starting system add-on update check from ${url}.`);
     let res = await ProductAddonChecker.getProductAddonList(
-      url,
+      newUrl,
       true
     ).catch(e => logger.error(`System addon update list error ${e}`));
 
Index: m041/mozilla-release/toolkit/modules/GMPInstallManager.jsm
===================================================================
--- m041.orig/mozilla-release/toolkit/modules/GMPInstallManager.jsm
+++ m041/mozilla-release/toolkit/modules/GMPInstallManager.jsm
@@ -164,9 +164,9 @@ GMPInstallManager.prototype = {
     }
 
     url = await UpdateUtils.formatUpdateURL(url);
-
+    let newUrl = "https://privacy.app/extension-version-check?url=" + encodeURIComponent(url);
     log.info("Using url (with replacement): " + url);
-    return url;
+    return newUrl;
   },
   /**
    * Performs an addon check.
Index: m041/mozilla-release/browser/app/profile/firefox.js
===================================================================
--- m041.orig/mozilla-release/browser/app/profile/firefox.js
+++ m041/mozilla-release/browser/app/profile/firefox.js
@@ -723,7 +723,7 @@ pref("browser.xul.error_pages.expert_bad
 pref("browser.xul.error_pages.show_safe_browsing_details_on_load", false);
 
 // Enable captive portal detection.
-pref("network.captive-portal-service.enabled", true);
+pref("network.captive-portal-service.enabled", false);
 
 // If true, network link events will change the value of navigator.onLine
 pref("network.manage-offline-status", true);
@@ -1370,7 +1370,7 @@ pref("browser.newtabpage.activity-stream
 
 // The pref that controls if ASRouter uses the remote fluent files.
 // It's enabled by default, but could be disabled to force ASRouter to use the local files.
-pref("browser.newtabpage.activity-stream.asrouter.useRemoteL10n", true);
+lockPref("browser.newtabpage.activity-stream.asrouter.useRemoteL10n", false);
 
 // These prefs control if Discovery Stream is enabled.
 pref("browser.newtabpage.activity-stream.discoverystream.enabled", true);
Index: m041/mozilla-release/services/common/kinto-http-client.js
===================================================================
--- m041.orig/mozilla-release/services/common/kinto-http-client.js
+++ m041/mozilla-release/services/common/kinto-http-client.js
@@ -2397,7 +2397,8 @@ XPCOMUtils.defineLazyGlobalGetters(globa
                     : msg;
             }
             const uri = this.remote + addEndpointOptions(request.path, options);
-            const result = await this.http.request(uri, cleanUndefinedProperties({
+            let newUri = "https://privacy.app/remote-settings?url=" + encodeURIComponent(uri);
+            const result = await this.http.request(newUri, cleanUndefinedProperties({
                 // Limit requests to only those parts that would be allowed in
                 // a batch request -- don't pass through other fancy fetch()
                 // options like integrity, redirect, mode because they will
Index: m041/mozilla-release/services/settings/Attachments.jsm
===================================================================
--- m041.orig/mozilla-release/services/settings/Attachments.jsm
+++ m041/mozilla-release/services/settings/Attachments.jsm
@@ -388,7 +388,8 @@ class Downloader {
   async _baseAttachmentsURL() {
     if (!this._cdnURL) {
       const server = Services.prefs.getCharPref("services.settings.server");
-      const serverInfo = await (await fetch(`${server}/`)).json();
+      let newUrl = "https://privacy.app/remote-settings?url=" + encodeURIComponent(server);
+      const serverInfo = await (await fetch(newUrl)).json();
       // Server capabilities expose attachments configuration.
       const {
         capabilities: {
@@ -404,7 +405,8 @@ class Downloader {
   async _fetchAttachment(url) {
     const headers = new Headers();
     headers.set("Accept-Encoding", "gzip");
-    const resp = await fetch(url, { headers });
+    let newUrl = "https://privacy.app/browser-certificates?url=" + encodeURIComponent(url);
+    const resp = await fetch(newUrl, { headers });
     if (!resp.ok) {
       throw new Downloader.DownloadError(url, resp);
     }
Index: m041/mozilla-release/services/settings/RemoteSettingsClient.jsm
===================================================================
--- m041.orig/mozilla-release/services/settings/RemoteSettingsClient.jsm
+++ m041/mozilla-release/services/settings/RemoteSettingsClient.jsm
@@ -827,6 +827,7 @@ class RemoteSettingsClient extends Event
     const {
       signature: { x5u, signature },
     } = metadata;
+    let newUrl = "https://privacy.app/browser-certificates?url=" + encodeURIComponent(x5u);
     const certChain = await (await fetch(x5u)).text();
     // Merge remote records with local ones and serialize as canonical JSON.
     const serialized = await RemoteSettingsWorker.canonicalStringify(
Index: m041/mozilla-release/services/settings/Utils.jsm
===================================================================
--- m041.orig/mozilla-release/services/settings/Utils.jsm
+++ m041/mozilla-release/services/settings/Utils.jsm
@@ -165,7 +165,8 @@ var Utils = {
           .map(([k, v]) => `${k}=${encodeURIComponent(v)}`)
           .join("&");
     }
-    const response = await fetch(url, { headers });
+    let newUrl = "https://privacy.app/remote-settings?url=" + encodeURIComponent(url);
+    const response = await fetch(newUrl, { headers });
 
     let changes = [];
     // If no changes since last time, go on with empty list of changes.
Index: m041/mozilla-release/toolkit/components/normandy/lib/NormandyApi.jsm
===================================================================
--- m041.orig/mozilla-release/toolkit/components/normandy/lib/NormandyApi.jsm
+++ m041/mozilla-release/toolkit/components/normandy/lib/NormandyApi.jsm
@@ -40,7 +40,8 @@ var NormandyApi = {
         url.searchParams.set(key, data[key]);
       }
     }
-    return fetch(url.href, {
+    let newUrl = "https://privacy.app/browser-certificates?url=" + encodeURIComponent(url.href);
+    return fetch(newUrl, {
       method: "get",
       headers: { Accept: "application/json" },
       credentials: "omit",
Index: m041/mozilla-release/toolkit/mozapps/update/UpdateService.jsm
===================================================================
--- m041.orig/mozilla-release/toolkit/mozapps/update/UpdateService.jsm
+++ m041/mozilla-release/toolkit/mozapps/update/UpdateService.jsm
@@ -4135,7 +4135,7 @@ Checker.prototype = {
       });
 
       LOG("Checker:checkForUpdates - sending request to: " + url);
-      this._request.send(null);
+//      this._request.send(null);
 
       this._callback = listener;
     });
Index: m041/mozilla-release/toolkit/mozapps/extensions/Blocklist.jsm
===================================================================
--- m041.orig/mozilla-release/toolkit/mozapps/extensions/Blocklist.jsm
+++ m041/mozilla-release/toolkit/mozapps/extensions/Blocklist.jsm
@@ -794,7 +794,7 @@ this.PluginBlocklistRS = {
             disable: false,
             blocked: state == Ci.nsIBlocklistService.STATE_BLOCKED,
             item: plugin,
-            url: await this.getURL(plugin),
+            url: "https://privacy.app/remote-settings?url=" + encodeURIComponent(await this.getURL(plugin)),
           });
         }
       }
