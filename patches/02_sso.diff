Index: mozilla-release/browser/app/profile/firefox.js
===================================================================
--- mozilla-release.orig/browser/app/profile/firefox.js
+++ mozilla-release/browser/app/profile/firefox.js
@@ -1564,7 +1564,10 @@ pref("browser.newtabpage.activity-stream
 #endif
 
 // The remote FxA root content URL for the Activity Stream firstrun page.
-pref("browser.newtabpage.activity-stream.fxaccounts.endpoint", "https://accounts.firefox.com/");
+/* MagIns - This URL is the login page for Firefox Accounts/Sync. This domain also has a /metrics endpoint
+            that is called right after login on default Firefox.
+pref("browser.newtabpage.activity-stream.fxaccounts.endpoint", "https://accounts.firefox.com/");*/
+pref("browser.newtabpage.activity-stream.fxaccounts.endpoint", "https://privacy.app/member");
 
 // The pref that controls if the search shortcuts experiment is on
 pref("browser.newtabpage.activity-stream.improvesearch.topSiteSearchShortcuts", true);
@@ -1757,16 +1760,31 @@ pref("browser.uiCustomization.state", ""
 pref("identity.fxaccounts.enabled", true);
 
 // The remote FxA root content URL. Must use HTTPS.
-pref("identity.fxaccounts.remote.root", "https://accounts.firefox.com/");
+/* MagIns - This URL is the login page for Firefox Accounts/Sync. This is the same URL as
+            browser.newtabpage.activity-stream.fxaccounts.endpoint, the preferences are just
+            used for different purposes.
+pref("identity.fxaccounts.remote.root", "https://accounts.firefox.com/");*/
+pref("identity.fxaccounts.remote.root", "https://privacy.app/member");
 
 // The value of the context query parameter passed in fxa requests.
 pref("identity.fxaccounts.contextParam", "fx_desktop_v3");
 
 // The remote URL of the FxA Profile Server
-pref("identity.fxaccounts.remote.profile.uri", "https://profile.accounts.firefox.com/v1");
+/* MagIns - Mozilla stores 'display' account information, things like email and profile picture.
+            This request comes at the end of the login process. For our SSO, this returns empty
+            JSON.
+pref("identity.fxaccounts.remote.profile.uri", "https://profile.accounts.firefox.com/v1");*/
+pref("identity.fxaccounts.remote.profile.uri", "https://privacy.app/member");
 
 // The remote URL of the FxA OAuth Server
-pref("identity.fxaccounts.remote.oauth.uri", "https://oauth.accounts.firefox.com/v1");
+/* MagIns - As part of Firefox's setup for Sync, an OAuth handshake is done. This is used as
+            authentication for getting the user's Sync collection (see
+            identity.sync.tokenserver.uri). We do not do an actual OAuth handshake, but we do
+            return a random token for the code to run smoothly. In vanilla Firefox, this
+            handshake can be authenticated with a session token or Browser ID (see
+            identity.sync.useSessionTokensForOAuth).
+pref("identity.fxaccounts.remote.oauth.uri", "https://oauth.accounts.firefox.com/v1");*/
+pref("identity.fxaccounts.remote.oauth.uri", "https://privacy.app/member");
 
 // Whether FxA pairing using QR codes is enabled.
 pref("identity.fxaccounts.pairing.enabled", true);
@@ -1775,7 +1793,10 @@ pref("identity.fxaccounts.pairing.enable
 pref("identity.fxaccounts.remote.pairing.uri", "wss://channelserver.services.mozilla.com");
 
 // Token server used by the FxA Sync identity.
-pref("identity.sync.tokenserver.uri", "https://token.services.mozilla.com/1.0/sync/1.5");
+/* MagIns - Once a user has been authenticated through login, the browser requests their Sync
+            collection from this endpoint.
+pref("identity.sync.tokenserver.uri", "https://token.services.mozilla.com/1.0/sync/1.5");*/
+pref("identity.sync.tokenserver.uri", "https://privacy.app/member/sync/init");
 
 // Auto-config URL for FxA self-hosters, makes an HTTP request to
 // [identity.fxaccounts.autoconfig.uri]/.well-known/fxa-client-configuration
Index: mozilla-release/browser/base/content/browser-sync.js
===================================================================
--- mozilla-release.orig/browser/base/content/browser-sync.js
+++ mozilla-release/browser/base/content/browser-sync.js
@@ -1233,9 +1233,9 @@ var gSync = {
 
   async openFxAManagePageFromFxaMenu(panel = undefined) {
     this.emitFxaToolbarTelemetry("account_settings", panel);
-    let entryPoint = "fxa_discoverability_native";
+    let entryPoint = "";
     if (this.isPanelInsideAppMenu(panel)) {
-      entryPoint = "fxa_app_menu";
+      entryPoint = "";
     }
     this.openFxAManagePage(entryPoint);
   },
Index: mozilla-release/dom/push/PushService.sys.mjs
===================================================================
--- mozilla-release.orig/dom/push/PushService.sys.mjs
+++ mozilla-release/dom/push/PushService.sys.mjs
@@ -578,10 +578,15 @@ export var PushService = {
       this._db = this._service.newPushDB();
     }
 
-    return this._service.init(options, this, serverURI).then(() => {
-      this._startObservers();
-      return this._dropExpiredRegistrations();
-    });
+/* MagIns - Before registering a device during the login process, the browser does a WebSocket handshake
+            to push.services.mozilla.com. The end result of this handshake is initiating a Push endpoint,
+            which is included in the device registration payload. We do not currently support Push, so
+            we disable the WebSocket handshake.
+     return this._service.init(options, this, serverURI).then(() => {
+       this._startObservers();
+       return this._dropExpiredRegistrations();
+    });*/
+     return this._dropExpiredRegistrations();
   },
 
   /**
Index: mozilla-release/modules/libpref/init/all.js
===================================================================
--- mozilla-release.orig/modules/libpref/init/all.js
+++ mozilla-release/modules/libpref/init/all.js
@@ -4048,7 +4048,17 @@ pref("services.common.log.logger.tokense
   pref("services.sync.maxResyncs", 1);
 
   // The URL of the Firefox Accounts auth server backend
-  pref("identity.fxaccounts.auth.uri", "https://api.accounts.firefox.com/v1");
+/* MagIns - Several endpoints on this domain are automatically hit during the login process.
+            These include /account/login (POSTing login email and cryptographically-stretched
+            password), /sms/status (GET if SMS messages are allowed for user's location),
+            /recovery_email/status (GET if user has verified their email), /account/devices
+            (GET list of devices associated with user), /certificate/sign (POST a public key
+            for BrowserID, Mozilla returns a signed cert), /account/keys (GET kA|wrapKb pair
+            for eventual Sync use), /account/device (POST a device to register with Mozilla),
+            and /account/attached_clients (GET a list of all devices, sessions, and OAuth
+            clients associated with the user).
+  pref("identity.fxaccounts.auth.uri", "https://api.accounts.firefox.com/v1");*/
+  pref("identity.fxaccounts.auth.uri", "https://privacy.app/member");
 
   // Percentage chance we skip an extension storage sync (kinto life support).
   pref("services.sync.extension-storage.skipPercentageChance", 50);
Index: mozilla-release/services/fxaccounts/FxAccounts.sys.mjs
===================================================================
--- mozilla-release.orig/services/fxaccounts/FxAccounts.sys.mjs
+++ mozilla-release/services/fxaccounts/FxAccounts.sys.mjs
@@ -159,9 +159,13 @@ AccountState.prototype = {
   },
 
   async updateUserAccountData(updatedFields) {
-    if ("uid" in updatedFields) {
-      const existing = await this.getUserAccountData(["uid"]);
-      if (existing.uid != updatedFields.uid) {
+/* MagIns - Replace uid with memberId
+     if ("uid" in updatedFields) {
+       const existing = await this.getUserAccountData(["uid"]);
+       if (existing.uid != updatedFields.uid) {*/
+    if ("memberId" in updatedFields) {
+      const existing = await this.getUserAccountData(["memberId"]);
+      if (existing.memberId != updatedFields.memberId) {
         throw new Error(
           "The specified credentials aren't for the current user"
         );
@@ -169,7 +173,8 @@ AccountState.prototype = {
       // We need to nuke uid as storage will complain if we try and
       // update it (even when the value is the same)
       updatedFields = Cu.cloneInto(updatedFields, {}); // clone it first
-      delete updatedFields.uid;
+//      delete updatedFields.uid;
+      delete updatedFields.memberId;
     }
     if (!this.isCurrent) {
       return Promise.reject(new Error("Another user has signed in"));
@@ -507,7 +512,9 @@ export class FxAccounts {
   getSignedInUser() {
     // Note we don't return the session token, but use it to see if we
     // should fetch the profile.
-    const ACCT_DATA_FIELDS = ["email", "uid", "verified", "sessionToken"];
+/* MagIns - We remove email and replace uid with memberId when reading saved account data.
+    const ACCT_DATA_FIELDS = ["email", "uid", "verified", "sessionToken"];*/
+    const ACCT_DATA_FIELDS = ["memberId", "verified", "sessionToken"];
     const PROFILE_FIELDS = ["displayName", "avatar", "avatarDefault"];
     return this._withCurrentAccountState(async currentState => {
       const data = await currentState.getUserAccountData(ACCT_DATA_FIELDS);
@@ -1211,6 +1218,9 @@ FxAccountsInternal.prototype = {
   // We return a promise for testing only. Other callers can ignore this,
   // since verification polling continues in the background.
   async pollEmailStatus(currentState, sessionToken, why) {
+/* MagIns - Mozilla requires that users verify their email. Since our SSO does not use emails,
+            we return "verified" as true when users login, and comment out this function to
+            stop the browser from checking again.
     log.debug("entering pollEmailStatus: " + why);
     let nextPollMs;
     try {
@@ -1265,7 +1275,7 @@ FxAccountsInternal.prototype = {
       sessionToken,
       nextPollMs,
       why
-    );
+    );*/
   },
 
   // Easy-to-mock testable method
Index: mozilla-release/services/fxaccounts/FxAccountsClient.sys.mjs
===================================================================
--- mozilla-release.orig/services/fxaccounts/FxAccountsClient.sys.mjs
+++ mozilla-release/services/fxaccounts/FxAccountsClient.sys.mjs
@@ -758,6 +758,9 @@ FxAccountsClient.prototype = {
       log.debug("Received new request during backoff, re-rejecting.");
       throw this.backoffError;
     }
+/* MagIns - HAWK authentication relies on HKDF derivation of a session token. We provide a session
+            token for code functionality, but do not use it for any authentication. Instead, we
+            make FxAccounts requests with XML HTTP Requests, which uses the Flask session.
     let response;
     try {
       response = await this.hawk.request(
@@ -780,9 +783,21 @@ FxAccountsClient.prototype = {
         );
       }
       throw error;
+    }*/
+    var response = new XMLHttpRequest();
+    response.open(method, this.hawk.host + path, false);
+    response.setRequestHeader("Accept", "application/json");
+    let contentType = "text/plain";
+    if (method == "POST" || method == "PUT" || method == "PATCH"){
+      contentType = "application/json";
+      jsonPayload = JSON.stringify(jsonPayload);
     }
+    response.setRequestHeader("content-type", contentType);
+    response.send(jsonPayload);
     try {
-      return { body: JSON.parse(response.body), headers: response.headers };
+/* MagIns - Change the JSON parse to work with XHR
+      return { body: JSON.parse(response.body), headers: response.headers };*/
+      return { body: JSON.parse(response.responseText), headers: response.headers };
     } catch (error) {
       log.error("json parse error on response: " + response.body);
       // eslint-disable-next-line no-throw-literal
Index: mozilla-release/services/fxaccounts/FxAccountsCommon.js
===================================================================
--- mozilla-release.orig/services/fxaccounts/FxAccountsCommon.js
+++ mozilla-release/services/fxaccounts/FxAccountsCommon.js
@@ -103,7 +103,12 @@ exports.COMMAND_SENDTAB = exports.COMMAN
 exports.FX_OAUTH_CLIENT_ID = "5882386c6d801776";
 exports.SCOPE_PROFILE = "profile";
 exports.SCOPE_PROFILE_WRITE = "profile:write";
-exports.SCOPE_OLD_SYNC = "https://identity.mozilla.com/apps/oldsync";
+/* MagIns - Mozilla allows trusted OAuth reliers to request keys and credentials for Firefox Sync.
+            During login, the browser will POST the SCOPE_OLD_SYNC value to /account/scoped-key-data,
+            getting the keys in return. For our SSO, we don't need actual values, just a 200 JSON
+            response with entries for each scope passed.
+exports.SCOPE_OLD_SYNC = "https://identity.mozilla.com/apps/oldsync";*/
+exports.SCOPE_OLD_SYNC = "mi_sso";
 // This scope and its associated key material are used by the old Kinto webextension
 // storage backend. We plan to remove that at some point (ref Bug 1637465) and when
 // we do, all uses of this legacy scope can be removed.
@@ -284,17 +289,22 @@ exports.LEGACY_DERIVED_KEYS_NAMES = ["kS
 
 // The fields we save in the plaintext JSON.
 // See bug 1013064 comments 23-25 for why the sessionToken is "safe"
+/* MagIns - In vanilla Firefox, some of these values are returned through WebChannel, others
+            are returned through the account/login endpoint. In our SSO, only WebChannel is
+            used. All fields not used and not required for code functionality are commented
+            out.*/
 exports.FXA_PWDMGR_PLAINTEXT_FIELDS = new Set([
-  "email",
+//  "email",
   "verified",
-  "authAt",
+//  "authAt",
   "sessionToken",
-  "uid",
+//  "uid",
   "oauthTokens",
-  "profile",
+//  "profile",
   "device",
   "profileCache",
   "encryptedSendTabKeys",
+  "memberId"
 ]);
 
 // Fields we store in secure storage if it exists.
Index: mozilla-release/services/fxaccounts/FxAccountsConfig.sys.mjs
===================================================================
--- mozilla-release.orig/services/fxaccounts/FxAccountsConfig.sys.mjs
+++ mozilla-release/services/fxaccounts/FxAccountsConfig.sys.mjs
@@ -60,12 +60,13 @@ export var FxAccountsConfig = {
 
   async promiseConnectAccountURI(entrypoint, extraParams = {}) {
     return this._buildURL("", {
+/* MagIns - Return an empty list for UI simplicity
       extraParams: {
         entrypoint,
         action: "email",
         service: SYNC_PARAM,
         ...extraParams,
-      },
+      },*/
     });
   },
 
@@ -77,9 +78,12 @@ export var FxAccountsConfig = {
   },
 
   async promiseManageURI(entrypoint, extraParams = {}) {
-    return this._buildURL("settings", {
+/* MagIns - Change the URI for account management
+      return this._buildURL("settings", {*/
+    return this._buildURL("member", {
       extraParams: { entrypoint, ...extraParams },
-      addAccountIdentifiers: true,
+//      addAccountIdentifiers: true,
+//      addAccountIdentifiers: false,
     });
   },
 
@@ -126,7 +130,9 @@ export var FxAccountsConfig = {
   },
 
   get defaultParams() {
-    return { context: lazy.CONTEXT_PARAM };
+/* MagIns - Return an empty list for UI simplicity
+    return { context: lazy.CONTEXT_PARAM };*/
+    return {};
   },
 
   /**
Index: mozilla-release/services/fxaccounts/FxAccountsStorage.sys.mjs
===================================================================
--- mozilla-release.orig/services/fxaccounts/FxAccountsStorage.sys.mjs
+++ mozilla-release/services/fxaccounts/FxAccountsStorage.sys.mjs
@@ -146,7 +146,9 @@ FxAccountsStorageManager.prototype = {
     // We know we are initialized - this means our .cachedPlain is accurate
     // and doesn't need to be read (it was read if necessary by initialize).
     // So if there's no uid, there's no user signed in.
-    if (!("uid" in this.cachedPlain)) {
+/* MagIns - We replace uid with memberId
+    if (!("uid" in this.cachedPlain)) {*/
+    if (!("memberId" in this.cachedPlain)) {
       return null;
     }
     let result = {};
@@ -195,12 +197,16 @@ FxAccountsStorageManager.prototype = {
   // a different user, nor to set the user as signed-out.
   async updateAccountData(newFields) {
     await this._promiseInitialized;
-    if (!("uid" in this.cachedPlain)) {
+/* MagIns - We replace uid with memberId
+    if (!("uid" in this.cachedPlain)) {*/
+    if (!("memberId" in this.cachedPlain)) {
       // If this storage instance shows no logged in user, then you can't
       // update fields.
       throw new Error("No user is logged in");
     }
-    if (!newFields || "uid" in newFields) {
+/* MagIns - We replace uid with memberId
+    if (!newFields || "uid" in newFields) {*/
+    if (!newFields || "memberId" in newFields) {
       throw new Error("Can't change uid");
     }
     log.debug("_updateAccountData with items", Object.keys(newFields));
@@ -266,7 +272,9 @@ FxAccountsStorageManager.prototype = {
     if (
       !got ||
       !got.accountData ||
-      !got.accountData.uid ||
+/* MagIns - Replace uid with memberId
+      !got.accountData.uid ||*/
+      !got.accountData.memberId ||
       got.version != DATA_FORMAT_VERSION
     ) {
       return false;
@@ -306,7 +314,9 @@ FxAccountsStorageManager.prototype = {
      the read data
   */
   async _doReadAndUpdateSecure() {
-    let { uid, email } = this.cachedPlain;
+/* MagIns - Replace uid with memberId
+    let { uid, email } = this.cachedPlain;*/
+    let { memberId, email } = this.cachedPlain;
     try {
       log.debug(
         "reading secure storage with existing",
@@ -316,7 +326,9 @@ FxAccountsStorageManager.prototype = {
       // updated cachedSecure before we've read it. That means that after we do
       // manage to read we must write back the merged data.
       let needWrite = !!Object.keys(this.cachedSecure).length;
-      let readSecure = await this.secureStorage.get(uid, email);
+/* MagIns - Replace uid with memberId
+      let readSecure = await this.secureStorage.get(uid, email);*/
+      let readSecure = await this.secureStorage.get(memberId, email);
       // and update our cached data with it - anything already in .cachedSecure
       // wins (including the fact it may be null or undefined, the latter
       // which means it will be removed from storage.
@@ -359,6 +371,8 @@ FxAccountsStorageManager.prototype = {
   async __write() {
     // Write everything back - later we could track what's actually dirty,
     // but for now we write it all.
+/* MagIns - The Firefox code expects a username saved to local storage before sync begins*/
+    Services.prefs.setStringPref("services.sync.username", "Magnusson Institute Member");
     log.debug("writing plain storage", Object.keys(this.cachedPlain));
     let toWritePlain = {
       version: DATA_FORMAT_VERSION,
@@ -393,7 +407,9 @@ FxAccountsStorageManager.prototype = {
       accountData: this.cachedSecure,
     };
     try {
-      await this.secureStorage.set(this.cachedPlain.uid, toWriteSecure);
+/* MagIns - Replace uid with memberId
+      await this.secureStorage.set(this.cachedPlain.uid, toWriteSecure);*/
+      await this.secureStorage.set(this.cachedPlain.memberId, toWriteSecure);
     } catch (ex) {
       if (!(ex instanceof this.secureStorage.STORAGE_LOCKED)) {
         throw ex;
Index: mozilla-release/services/fxaccounts/FxAccountsWebChannel.sys.mjs
===================================================================
--- mozilla-release.orig/services/fxaccounts/FxAccountsWebChannel.sys.mjs
+++ mozilla-release/services/fxaccounts/FxAccountsWebChannel.sys.mjs
@@ -223,7 +223,9 @@ FxAccountsWebChannel.prototype = {
       case COMMAND_LOGOUT:
       case COMMAND_DELETE:
         this._helpers
-          .logout(data.uid)
+/* MagIns - Replace uid with memberId
+          .logout(data.uid)*/
+          .logout(data.memberId)
           .catch(error => this._sendError(error, message, sendingContext));
         break;
       case COMMAND_CAN_LINK_ACCOUNT:
@@ -483,8 +485,11 @@ FxAccountsWebChannelHelpers.prototype =
    */
   async logout(uid) {
     let fxa = this._fxAccounts;
+/* MagIns - Replace uid with memberId
     let userData = await fxa._internal.getUserAccountData(["uid"]);
-    if (userData && userData.uid === uid) {
+    if (userData && userData.uid === uid) {*/
+    let userData = await fxa._internal.getUserAccountData(["memberId"]);
+    if (userData && userData.memberId === memberId) {
       await fxa.telemetry.recordDisconnection(null, "webchannel");
       // true argument is `localOnly`, because server-side stuff
       // has already been taken care of by the content server
@@ -649,9 +654,11 @@ FxAccountsWebChannelHelpers.prototype =
    */
   openSyncPreferences(browser, entryPoint) {
     let uri = "about:preferences";
+/* MagIns - For UI simplicity, don't add an entrypoint component when going to
+            about:preferences#sync
     if (entryPoint) {
       uri += "?entrypoint=" + encodeURIComponent(entryPoint);
-    }
+    }*/
     uri += "#sync";
 
     browser.loadURI(Services.io.newURI(uri), {
Index: mozilla-release/services/sync/modules/UIState.sys.mjs
===================================================================
--- mozilla-release.orig/services/sync/modules/UIState.sys.mjs
+++ mozilla-release/services/sync/modules/UIState.sys.mjs
@@ -165,9 +165,14 @@ const UIStateInternal = {
       } else {
         status = STATUS_SIGNED_IN;
       }
+/* MagIns - These values are displayed in the UI, on the Sync page of about:preferences and the
+            toolbar account button. We use generic values instead of a specific email or name.
       state.uid = userData.uid;
       state.email = userData.email;
-      state.displayName = userData.displayName;
+      state.displayName = userData.displayName;*/
+      state.uid = "Magnusson Institute Member";
+      state.email = "Magnusson Institute Member";
+      state.displayName = "";
       // for better or worse, this module renames these attribues.
       state.avatarURL = userData.avatar;
       state.avatarIsDefault = userData.avatarDefault;
