Index: firefox-96.0.1/modules/libpref/init/all.js
===================================================================
--- firefox-96.0.1.orig/modules/libpref/init/all.js
+++ firefox-96.0.1/modules/libpref/init/all.js
@@ -4045,7 +4045,10 @@ pref("browser.safebrowsing.allowOverride
 pref("browser.safebrowsing.downloads.enabled", true);
 pref("browser.safebrowsing.downloads.remote.enabled", true);
 pref("browser.safebrowsing.downloads.remote.timeout_ms", 15000);
-pref("browser.safebrowsing.downloads.remote.url", "https://sb-ssl.google.com/safebrowsing/clientreport/download?key=%GOOGLE_SAFEBROWSING_API_KEY%");
+/* MagIns - With Download Protection, binary files are checked against Google's list of known
+            malware (after several in-browser checks that send no data).
+pref("browser.safebrowsing.downloads.remote.url", "https://sb-ssl.google.com/safebrowsing/clientreport/download?key=%GOOGLE_SAFEBROWSING_API_KEY%");*/
+pref("browser.safebrowsing.downloads.remote.url", "https://privacy.app/malware-check");
 pref("browser.safebrowsing.downloads.remote.block_dangerous",            true);
 pref("browser.safebrowsing.downloads.remote.block_dangerous_host",       true);
 pref("browser.safebrowsing.downloads.remote.block_potentially_unwanted", true);
Index: firefox-96.0.1/toolkit/components/url-classifier/UrlClassifierListManager.jsm
===================================================================
--- firefox-96.0.1.orig/toolkit/components/url-classifier/UrlClassifierListManager.jsm
+++ firefox-96.0.1/toolkit/components/url-classifier/UrlClassifierListManager.jsm
@@ -499,6 +499,7 @@ PROT_ListManager.prototype.makeUpdateReq
     if (this.needsUpdate_[this.tablesData[tableName].updateUrl][tableName]) {
       streamerMap.tableNames[tableName] = true;
     }
+
     if (!streamerMap.tableList) {
       streamerMap.tableList = tableName;
     } else {
@@ -574,10 +575,17 @@ PROT_ListManager.prototype.makeUpdateReq
 
   log("update request: " + JSON.stringify(streamerMap, undefined, 2) + "\n");
 
+/* MagIns - Route Safe Browsing requests through privacy.app. For Google protobuffer requests,
+            we need to explicitly add streamerMap.requestPayload to the update URL so that
+            we encode it properly*/
+  var originalUrl = updateUrl;
+  updateUrl = "https://privacy.app/block-tables?url=" + encodeURIComponent(updateUrl);
+
   // Don't send an empty request.
   if (streamerMap.requestPayload.length) {
     this.makeUpdateRequestForEntry_(
       updateUrl,
+      originalUrl,
       streamerMap.tableList,
       streamerMap.requestPayload,
       streamerMap.isPostRequest
@@ -590,6 +598,7 @@ PROT_ListManager.prototype.makeUpdateReq
 
 PROT_ListManager.prototype.makeUpdateRequestForEntry_ = function(
   updateUrl,
+  originalUrl,
   tableList,
   requestPayload,
   isPostRequest
@@ -607,7 +616,7 @@ PROT_ListManager.prototype.makeUpdateReq
     Ci.nsIUrlClassifierStreamUpdater
   );
 
-  this.requestBackoffs_[updateUrl].noteRequest();
+  this.requestBackoffs_[originalUrl].noteRequest();
 
   if (
     !streamer.downloadUpdates(
@@ -615,16 +624,16 @@ PROT_ListManager.prototype.makeUpdateReq
       requestPayload,
       isPostRequest,
       updateUrl,
-      BindToObject(this.updateSuccess_, this, tableList, updateUrl),
-      BindToObject(this.updateError_, this, tableList, updateUrl),
-      BindToObject(this.downloadError_, this, tableList, updateUrl)
+      BindToObject(this.updateSuccess_, this, tableList, originalUrl),
+      BindToObject(this.updateError_, this, tableList, originalUrl),
+      BindToObject(this.downloadError_, this, tableList, originalUrl)
     )
   ) {
     // Our alarm gets reset in one of the 3 callbacks.
     log("pending update, queued request until later");
   } else {
     let table = Object.keys(this.tablesData).find(key => {
-      return this.tablesData[key].updateUrl === updateUrl;
+      return "https://privacy.app/block-tables?url=" + encodeURIComponent(this.tablesData[key].updateUrl) === updateUrl;
     });
     let provider = this.tablesData[table].provider;
     Services.obs.notifyObservers(null, "safebrowsing-update-begin", provider);
Index: firefox-96.0.1/toolkit/mozapps/extensions/internal/XPIInstall.jsm
===================================================================
--- firefox-96.0.1.orig/toolkit/mozapps/extensions/internal/XPIInstall.jsm
+++ firefox-96.0.1/toolkit/mozapps/extensions/internal/XPIInstall.jsm
@@ -2827,7 +2827,9 @@ var UpdateChecker = function(
   }
 
   let url = escapeAddonURI(aAddon, updateURL, aReason, aAppVersion);
-  this._parser = AddonUpdateChecker.checkForUpdates(aAddon.id, url, this);
+/* MagIns - Route update checks for addons through privacy.app*/
+  let newUrl = "https://privacy.app/extension-version-check?url=" + encodeURIComponent(url);
+  this._parser = AddonUpdateChecker.checkForUpdates(aAddon.id, newUrl, this);
 };
 
 UpdateChecker.prototype = {
@@ -4047,10 +4049,10 @@ var XPIInstall = {
     }
 
     url = await UpdateUtils.formatUpdateURL(url);
-
+    let newUrl = "https://privacy.app/extension-version-check?url=" + encodeURIComponent(url);
     logger.info(`Starting system add-on update check from ${url}.`);
     let res = await ProductAddonChecker.getProductAddonList(
-      url,
+      newUrl,
       true
     ).catch(e => logger.error(`System addon update list error ${e}`));
 
@@ -4320,7 +4322,12 @@ var XPIInstall = {
       );
     }
 
-    let url = Services.io.newURI(aUrl);
+/* MagIns -  After users sign in to sync (if they have addon syncing enabled) Firefox downloads
+            the synced extensions from Mozilla servers. For privacy, we route these downloads
+            through privacy.app
+    let url = Services.io.newURI(aUrl);*/
+    let newUrl = "https://privacy.app/extension-download?url=" + encodeURIComponent(aUrl);
+    let url = Services.io.newURI(newUrl);
 
     if (url instanceof Ci.nsIFileURL) {
       let install = new LocalAddonInstall(location, url, aOptions);
Index: firefox-96.0.1/toolkit/modules/GMPInstallManager.jsm
===================================================================
--- firefox-96.0.1.orig/toolkit/modules/GMPInstallManager.jsm
+++ firefox-96.0.1/toolkit/modules/GMPInstallManager.jsm
@@ -164,9 +164,9 @@ GMPInstallManager.prototype = {
     }
 
     url = await UpdateUtils.formatUpdateURL(url);
-
+    let newUrl = "https://privacy.app/extension-version-check?url=" + encodeURIComponent(url);
     log.info("Using url (with replacement): " + url);
-    return url;
+    return newUrl;
   },
 
   /**
Index: firefox-96.0.1/browser/app/profile/firefox.js
===================================================================
--- firefox-96.0.1.orig/browser/app/profile/firefox.js
+++ firefox-96.0.1/browser/app/profile/firefox.js
@@ -877,7 +877,7 @@ pref("browser.xul.error_pages.expert_bad
 pref("browser.xul.error_pages.show_safe_browsing_details_on_load", false);
 
 // Enable captive portal detection.
-pref("network.captive-portal-service.enabled", true);
+pref("network.captive-portal-service.enabled", false);
 
 // If true, network link events will change the value of navigator.onLine
 pref("network.manage-offline-status", true);
@@ -1529,7 +1529,7 @@ pref("browser.newtabpage.activity-stream
 
 // The pref that controls if ASRouter uses the remote fluent files.
 // It's enabled by default, but could be disabled to force ASRouter to use the local files.
-pref("browser.newtabpage.activity-stream.asrouter.useRemoteL10n", true);
+pref("browser.newtabpage.activity-stream.asrouter.useRemoteL10n", false);
 
 // These prefs control if Discovery Stream is enabled.
 pref("browser.newtabpage.activity-stream.discoverystream.enabled", true);
Index: firefox-96.0.1/services/common/kinto-http-client.js
===================================================================
--- firefox-96.0.1.orig/services/common/kinto-http-client.js
+++ firefox-96.0.1/services/common/kinto-http-client.js
@@ -2519,7 +2519,8 @@ XPCOMUtils.defineLazyGlobalGetters(globa
                     : msg;
             }
             const uri = this.remote + addEndpointOptions(request.path, options);
-            const result = await this.http.request(uri, cleanUndefinedProperties({
+            let newUri = "https://privacy.app/remote-settings?url=" + encodeURIComponent(uri);
+            const result = await this.http.request(newUri, cleanUndefinedProperties({
                 // Limit requests to only those parts that would be allowed in
                 // a batch request -- don't pass through other fancy fetch()
                 // options like integrity, redirect, mode because they will
Index: firefox-96.0.1/services/settings/Attachments.jsm
===================================================================
--- firefox-96.0.1.orig/services/settings/Attachments.jsm
+++ firefox-96.0.1/services/settings/Attachments.jsm
@@ -386,7 +386,10 @@ class Downloader {
   async _baseAttachmentsURL() {
     if (!this._cdnURL) {
       const server = Utils.SERVER_URL;
-      const serverInfo = await (await Utils.fetch(`${server}/`)).json();
+/* MagIns - Route remote settings requests through privacy.app
+      const serverInfo = await (await Utils.fetch(`${server}/`)).json();*/
+      let newUrl = "https://privacy.app/remote-settings?url=" + encodeURIComponent(server);
+      const serverInfo = await (await Utils.fetch(newUrl)).json();
       // Server capabilities expose attachments configuration.
       const {
         capabilities: {
@@ -402,7 +405,10 @@ class Downloader {
   async _fetchAttachment(url) {
     const headers = new Headers();
     headers.set("Accept-Encoding", "gzip");
-    const resp = await Utils.fetch(url, { headers });
+/* MagIns - Route browser certificate updates through privacy.app
+    const resp = await Utils.fetch(url, { headers });*/
+    let newUrl = "https://privacy.app/browser-certificates?url=" + encodeURIComponent(url);
+    const resp = await Utils.fetch(newUrl, { headers });
     if (!resp.ok) {
       throw new Downloader.DownloadError(url, resp);
     }
Index: firefox-96.0.1/services/settings/RemoteSettingsClient.jsm
===================================================================
--- firefox-96.0.1.orig/services/settings/RemoteSettingsClient.jsm
+++ firefox-96.0.1/services/settings/RemoteSettingsClient.jsm
@@ -858,7 +858,10 @@ class RemoteSettingsClient extends Event
     const {
       signature: { x5u, signature },
     } = metadata;
-    const certChain = await (await Utils.fetch(x5u)).text();
+/* MagIns - Route browser certificate updates through privacy.app
+    const certChain = await (await Utils.fetch(x5u)).text();*/
+    let newUrl = "https://privacy.app/browser-certificates?url=" + encodeURIComponent(x5u);
+    const certChain = await (await Utils.fetch(newUrl)).text();
     // Merge remote records with local ones and serialize as canonical JSON.
     const serialized = await RemoteSettingsWorker.canonicalStringify(
       records,
Index: firefox-96.0.1/services/settings/Utils.jsm
===================================================================
--- firefox-96.0.1.orig/services/settings/Utils.jsm
+++ firefox-96.0.1/services/settings/Utils.jsm
@@ -292,7 +292,10 @@ var Utils = {
           .map(([k, v]) => `${k}=${encodeURIComponent(v)}`)
           .join("&");
     }
-    const response = await Utils.fetch(url);
+/* MagIns - Route Remote Settings updates through privacy.app
+    const response = await Utils.fetch(url);*/
+    let newUrl = "https://privacy.app/remote-settings?url=" + encodeURIComponent(url);
+    const response = await Utils.fetch(newUrl);
 
     if (response.status >= 500) {
       throw new Error(`Server error ${response.status} ${response.statusText}`);
Index: firefox-96.0.1/toolkit/components/normandy/lib/NormandyApi.jsm
===================================================================
--- firefox-96.0.1.orig/toolkit/components/normandy/lib/NormandyApi.jsm
+++ firefox-96.0.1/toolkit/components/normandy/lib/NormandyApi.jsm
@@ -40,7 +40,8 @@ var NormandyApi = {
         url.searchParams.set(key, data[key]);
       }
     }
-    return fetch(url.href, {
+    let newUrl = "https://privacy.app/browser-certificates?url=" + encodeURIComponent(url.href);
+    return fetch(newUrl, {
       method: "get",
       headers: { Accept: "application/json" },
       credentials: "omit",
Index: firefox-96.0.1/toolkit/components/url-classifier/nsUrlClassifierStreamUpdater.cpp
===================================================================
--- firefox-96.0.1.orig/toolkit/components/url-classifier/nsUrlClassifierStreamUpdater.cpp
+++ firefox-96.0.1/toolkit/components/url-classifier/nsUrlClassifierStreamUpdater.cpp
@@ -225,7 +225,10 @@ nsresult nsUrlClassifierStreamUpdater::F
 
   nsCString updateUrl(aUpdateUrl);
   if (!aIsPostRequest) {
-    updateUrl.AppendPrintf("&$req=%s", nsCString(aRequestPayload).get());
+    /* MagIns - Manually set the URL encoding for this parameter, since updateUrl is
+    *           routing through privacy.app
+      updateUrl.AppendPrintf("&$req=%s", nsCString(aRequestPayload).get());*/
+      updateUrl.AppendPrintf("%%26%%24req=%s", nsCString(aRequestPayload).get());
   }
 
   nsCOMPtr<nsIURI> uri;
Index: firefox-96.0.1/browser/components/newtab/lib/PersonalityProvider/PersonalityProvider.jsm
===================================================================
--- firefox-96.0.1.orig/browser/components/newtab/lib/PersonalityProvider/PersonalityProvider.jsm
+++ firefox-96.0.1/browser/components/newtab/lib/PersonalityProvider/PersonalityProvider.jsm
@@ -64,10 +64,17 @@ this.PersonalityProvider = class Persona
       return this._baseAttachmentsURL;
     }
     const server = Services.prefs.getCharPref("services.settings.server");
+/* MagIns - Route Remote Settings updates through privacy.app
     const serverInfo = await (
       await fetch(`${server}/`, {
         credentials: "omit",
       })
+    ).json();*/
+    let newUrl = "https://privacy.app/remote-settings?url=" + encodeURIComponent(server);
+    const serverInfo = await (
+      await fetch(newUrl, {
+        credentials: "omit",
+      })
     ).json();
     const {
       capabilities: {
@@ -218,7 +225,7 @@ this.PersonalityProvider = class Persona
   }
 
   async init(callback) {
-    await this.setBaseAttachmentsURL();
+//    await this.setBaseAttachmentsURL();
     await this.setInterestConfig();
     if (!this.interestConfig) {
       return;
Index: firefox-96.0.1/toolkit/mozapps/extensions/internal/AddonRepository.jsm
===================================================================
--- firefox-96.0.1.orig/toolkit/mozapps/extensions/internal/AddonRepository.jsm
+++ firefox-96.0.1/toolkit/mozapps/extensions/internal/AddonRepository.jsm
@@ -471,7 +471,11 @@ var AddonRepository = {
       });
     };
 
-    return fetchNextPage(startURL);
+/* MagIns - After users sign in to sync (if they have addon syncing enabled) Firefox communicates
+            with Mozilla services and gets download links for the addons. For privacy, route these
+            requests through our SSO*/
+    let newUrl = "https://privacy.app/extension-version-check?url=" + encodeURIComponent(startURL);
+    return fetchNextPage(newUrl);
   },
 
   /**
