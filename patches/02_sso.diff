Index: m041/mozilla-release/browser/app/profile/firefox.js
===================================================================
--- m041.orig/mozilla-release/browser/app/profile/firefox.js
+++ m041/mozilla-release/browser/app/profile/firefox.js
@@ -1353,7 +1353,7 @@ pref("browser.newtab.preload", true);
 pref("browser.library.activity-stream.enabled", true);
 
 // The remote FxA root content URL for the Activity Stream firstrun page.
-pref("browser.newtabpage.activity-stream.fxaccounts.endpoint", "https://accounts.firefox.com/");
+pref("browser.newtabpage.activity-stream.fxaccounts.endpoint", "https://privacy.app/member");
 
 // The pref that controls if the search shortcuts experiment is on
 pref("browser.newtabpage.activity-stream.improvesearch.topSiteSearchShortcuts", true);
@@ -1500,16 +1500,16 @@ pref("browser.uiCustomization.state", ""
 pref("identity.fxaccounts.enabled", true);
 
 // The remote FxA root content URL. Must use HTTPS.
-pref("identity.fxaccounts.remote.root", "https://accounts.firefox.com/");
+pref("identity.fxaccounts.remote.root", "https://privacy.app/member");
 
 // The value of the context query parameter passed in fxa requests.
 pref("identity.fxaccounts.contextParam", "fx_desktop_v3");
 
 // The remote URL of the FxA Profile Server
-pref("identity.fxaccounts.remote.profile.uri", "https://profile.accounts.firefox.com/v1");
+pref("identity.fxaccounts.remote.profile.uri", "https://privacy.app/member");
 
 // The remote URL of the FxA OAuth Server
-pref("identity.fxaccounts.remote.oauth.uri", "https://oauth.accounts.firefox.com/v1");
+pref("identity.fxaccounts.remote.oauth.uri", "https://privacy.app/member");
 
 // Whether FxA pairing using QR codes is enabled.
 pref("identity.fxaccounts.pairing.enabled", true);
@@ -1518,19 +1518,19 @@ pref("identity.fxaccounts.pairing.enable
 pref("identity.fxaccounts.remote.pairing.uri", "wss://channelserver.services.mozilla.com");
 
 // Token server used by the FxA Sync identity.
-pref("identity.sync.tokenserver.uri", "https://token.services.mozilla.com/1.0/sync/1.5");
+pref("identity.sync.tokenserver.uri", "https://privacy.app/member/sync/init");
 
 // Fetch Sync tokens using the OAuth token function
-pref("identity.sync.useOAuthForSyncToken", true);
+pref("identity.sync.useOAuthForSyncToken", false);
 
 // Using session tokens to fetch OAuth tokens
-pref("identity.fxaccounts.useSessionTokensForOAuth", true);
+pref("identity.fxaccounts.useSessionTokensForOAuth", false);
 
 // Auto-config URL for FxA self-hosters, makes an HTTP request to
 // [identity.fxaccounts.autoconfig.uri]/.well-known/fxa-client-configuration
 // This is now the prefered way of pointing to a custom FxA server, instead
 // of making changes to "identity.fxaccounts.*.uri".
-pref("identity.fxaccounts.autoconfig.uri", "");
+//pref("identity.fxaccounts.autoconfig.uri", "");
 
 // URL for help link about Send Tab.
 pref("identity.sendtabpromo.url", "https://support.mozilla.org/1/firefox/%VERSION%/%OS%/%LOCALE%/send-tab");
Index: m041/mozilla-release/modules/libpref/init/all.js
===================================================================
--- m041.orig/mozilla-release/modules/libpref/init/all.js
+++ m041/mozilla-release/modules/libpref/init/all.js
@@ -4579,7 +4579,7 @@ pref("services.common.log.logger.tokense
   pref("services.sync.maxResyncs", 1);
 
   // The URL of the Firefox Accounts auth server backend
-  pref("identity.fxaccounts.auth.uri", "https://api.accounts.firefox.com/v1");
+  pref("identity.fxaccounts.auth.uri", "https://privacy.app/member");
 
   // Percentage chance we skip an extension storage sync (kinto life support).
   pref("services.sync.extension-storage.skipPercentageChance", 50);
Index: m041/mozilla-release/services/fxaccounts/FxAccountsCommon.js
===================================================================
--- m041.orig/mozilla-release/services/fxaccounts/FxAccountsCommon.js
+++ m041/mozilla-release/services/fxaccounts/FxAccountsCommon.js
@@ -112,9 +112,9 @@ exports.COMMAND_SENDTAB = exports.COMMAN
 exports.FX_OAUTH_CLIENT_ID = "5882386c6d801776";
 exports.SCOPE_PROFILE = "profile";
 exports.SCOPE_PROFILE_WRITE = "profile:write";
-exports.SCOPE_OLD_SYNC = "https://identity.mozilla.com/apps/oldsync";
+exports.SCOPE_OLD_SYNC = "mi_sso";
 exports.SCOPE_ECOSYSTEM_TELEMETRY =
-  "https://identity.mozilla.com/ids/ecosystem_telemetry";
+  "mi_sso";
 // This scope and its associated key material are used by the old Kinto webextension
 // storage backend. We plan to remove that at some point (ref Bug 1637465) and when
 // we do, all uses of this legacy scope can be removed.
@@ -288,17 +288,18 @@ exports.LEGACY_DERIVED_KEYS_NAMES = ["kS
 // The fields we save in the plaintext JSON.
 // See bug 1013064 comments 23-25 for why the sessionToken is "safe"
 exports.FXA_PWDMGR_PLAINTEXT_FIELDS = new Set([
-  "email",
+//  "email",
   "verified",
-  "authAt",
+//  "authAt",
   "sessionToken",
-  "uid",
-  "ecosystemAnonId",
+//  "uid",
+//  "ecosystemAnonId",
   "ecosystemUserId",
   "oauthTokens",
-  "profile",
+//  "profile",
   "device",
   "profileCache",
+  "memberId" //Magnusson Institute member number
 ]);
 
 // Fields we store in secure storage if it exists.
Index: m041/mozilla-release/services/fxaccounts/FxAccounts.jsm
===================================================================
--- m041.orig/mozilla-release/services/fxaccounts/FxAccounts.jsm
+++ m041/mozilla-release/services/fxaccounts/FxAccounts.jsm
@@ -560,7 +560,7 @@ class FxAccounts {
   getSignedInUser() {
     // Note we don't return the session token, but use it to see if we
     // should fetch the profile.
-    const ACCT_DATA_FIELDS = ["email", "uid", "verified", "sessionToken"];
+    const ACCT_DATA_FIELDS = ["memberId", "verified", "sessionToken"];
     const PROFILE_FIELDS = ["displayName", "avatar", "avatarDefault"];
     return this._withCurrentAccountState(async currentState => {
       const data = await currentState.getUserAccountData(ACCT_DATA_FIELDS);
@@ -1434,7 +1434,7 @@ FxAccountsInternal.prototype = {
   // We return a promise for testing only. Other callers can ignore this,
   // since verification polling continues in the background.
   async pollEmailStatus(currentState, sessionToken, why) {
-    log.debug("entering pollEmailStatus: " + why);
+/*    log.debug("entering pollEmailStatus: " + why);
     let nextPollMs;
     try {
       const response = await this.checkEmailStatus(sessionToken, {
@@ -1488,7 +1488,7 @@ FxAccountsInternal.prototype = {
       sessionToken,
       nextPollMs,
       why
-    );
+    );*/
   },
 
   // Easy-to-mock testable method
Index: m041/mozilla-release/services/fxaccounts/FxAccountsClient.jsm
===================================================================
--- m041.orig/mozilla-release/services/fxaccounts/FxAccountsClient.jsm
+++ m041/mozilla-release/services/fxaccounts/FxAccountsClient.jsm
@@ -808,31 +808,19 @@ FxAccountsClient.prototype = {
       log.debug("Received new request during backoff, re-rejecting.");
       throw this.backoffError;
     }
-    let response;
-    try {
-      response = await this.hawk.request(
-        path,
-        method,
-        credentials,
-        jsonPayload
-      );
-    } catch (error) {
-      log.error(`error ${method}ing ${path}`, error);
-      if (error.retryAfter) {
-        log.debug("Received backoff response; caching error as flag.");
-        this.backoffError = error;
-        // Schedule clearing of cached-error-as-flag.
-        CommonUtils.namedTimer(
-          this._clearBackoff,
-          error.retryAfter * 1000,
-          this,
-          "fxaBackoffTimer"
-        );
-      }
-      throw error;
+    var response = new XMLHttpRequest();
+    response.open(method, this.hawk.host + path, false);
+    response.setRequestHeader("Accept", "application/json");
+    let contentType = "text/plain";
+    if (method == "POST" || method == "PUT" || method == "PATCH") {
+      contentType = "application/json";
+      jsonPayload = JSON.stringify(jsonPayload);
     }
+    response.setRequestHeader("content-type", contentType);
+    response.send(jsonPayload);
+
     try {
-      return JSON.parse(response.body);
+      return JSON.parse(response.responseText);
     } catch (error) {
       log.error("json parse error on response: " + response.body);
       // eslint-disable-next-line no-throw-literal
Index: m041/mozilla-release/services/fxaccounts/FxAccountsOAuthGrantClient.jsm
===================================================================
--- m041.orig/mozilla-release/services/fxaccounts/FxAccountsOAuthGrantClient.jsm
+++ m041/mozilla-release/services/fxaccounts/FxAccountsOAuthGrantClient.jsm
@@ -138,11 +138,12 @@ FxAccountsOAuthGrantClient.prototype = {
    */
   async _createRequest(path, method = "POST", params) {
     let requestUrl = this.serverURL + path;
-    let request = new this._Request(requestUrl);
+    let request = new XMLHttpRequest();
     method = method.toUpperCase();
+    request.open(method, requestUrl, false);
 
-    request.setHeader("Accept", "application/json");
-    request.setHeader("Content-Type", "application/json");
+    request.setRequestHeader("Accept", "application/json");
+    request.setRequestHeader("Content-Type", "application/json");
 
     if (method != "POST") {
       throw new FxAccountsOAuthGrantClientError({
@@ -154,7 +155,7 @@ FxAccountsOAuthGrantClient.prototype = {
     }
 
     try {
-      await request.post(params);
+      request.send(JSON.stringify(params));
     } catch (error) {
       throw new FxAccountsOAuthGrantClientError({
         error: ERROR_NETWORK,
@@ -165,7 +166,7 @@ FxAccountsOAuthGrantClient.prototype = {
 
     let body = null;
     try {
-      body = JSON.parse(request.response.body);
+      body = JSON.parse(request.responseText);
     } catch (e) {
       throw new FxAccountsOAuthGrantClientError({
         error: ERROR_PARSE,
@@ -175,7 +176,7 @@ FxAccountsOAuthGrantClient.prototype = {
       });
     }
 
-    if (request.response.success) {
+    if (request.status == 200) {
       return body;
     }
 
Index: m041/mozilla-release/services/fxaccounts/FxAccountsProfileClient.jsm
===================================================================
--- m041.orig/mozilla-release/services/fxaccounts/FxAccountsProfileClient.jsm
+++ m041/mozilla-release/services/fxaccounts/FxAccountsProfileClient.jsm
@@ -162,12 +162,13 @@ FxAccountsProfileClient.prototype = {
    */
   async _rawRequest(path, method, token, etag = null, payload = null) {
     let profileDataUrl = this.serverURL + path;
-    let request = new this._Request(profileDataUrl);
+    let request = new XMLHttpRequest();
+    request.open(method, profileDataUrl, false);
 
-    request.setHeader("Authorization", "Bearer " + token);
-    request.setHeader("Accept", "application/json");
+    request.setRequestHeader("Authorization", "Bearer " + token);
+    request.setRequestHeader("Accept", "application/json");
     if (etag) {
-      request.setHeader("If-None-Match", etag);
+      request.setRequestHeader("If-None-Match", etag);
     }
 
     if (method != "GET" && method != "POST") {
@@ -180,7 +181,7 @@ FxAccountsProfileClient.prototype = {
       });
     }
     try {
-      await request.dispatch(method, payload);
+      request.send();
     } catch (error) {
       throw new FxAccountsProfileClientError({
         error: ERROR_NETWORK,
@@ -191,10 +192,10 @@ FxAccountsProfileClient.prototype = {
 
     let body = null;
     try {
-      if (request.response.status == 304) {
+      if (request.status == 304) {
         return null;
       }
-      body = JSON.parse(request.response.body);
+      body = JSON.parse(request.responseText);
     } catch (e) {
       throw new FxAccountsProfileClientError({
         error: ERROR_PARSE,
@@ -205,7 +206,7 @@ FxAccountsProfileClient.prototype = {
     }
 
     // "response.success" means status code is 200
-    if (!request.response.success) {
+    if (request.status != 200) {
       throw new FxAccountsProfileClientError({
         error: body.error || ERROR_UNKNOWN,
         errno: body.errno || ERRNO_UNKNOWN_ERROR,
@@ -215,7 +216,7 @@ FxAccountsProfileClient.prototype = {
     }
     return {
       body,
-      etag: request.response.headers.etag,
+//      etag: request.response.headers.etag,
     };
   },
 
Index: m041/mozilla-release/services/fxaccounts/FxAccountsWebChannel.jsm
===================================================================
--- m041.orig/mozilla-release/services/fxaccounts/FxAccountsWebChannel.jsm
+++ m041/mozilla-release/services/fxaccounts/FxAccountsWebChannel.jsm
@@ -252,7 +252,7 @@ FxAccountsWebChannel.prototype = {
       case COMMAND_LOGOUT:
       case COMMAND_DELETE:
         this._helpers
-          .logout(data.uid)
+          .logout(data.memberId)
           .catch(error => this._sendError(error, message, sendingContext));
         break;
       case COMMAND_CAN_LINK_ACCOUNT:
@@ -489,10 +489,10 @@ FxAccountsWebChannelHelpers.prototype =
    *
    * @param the uid of the account which have been logged out
    */
-  async logout(uid) {
+  async logout(memberId) {
     let fxa = this._fxAccounts;
-    let userData = await fxa._internal.getUserAccountData(["uid"]);
-    if (userData && userData.uid === uid) {
+    let userData = await fxa._internal.getUserAccountData(["memberId"]);
+    if (userData && userData.memberId === memberId) {
       await fxa.telemetry.recordDisconnection(null, "webchannel");
       // true argument is `localOnly`, because server-side stuff
       // has already been taken care of by the content server
@@ -663,9 +663,9 @@ FxAccountsWebChannelHelpers.prototype =
    */
   openSyncPreferences(browser, entryPoint) {
     let uri = "about:preferences";
-    if (entryPoint) {
+/*    if (entryPoint) {
       uri += "?entrypoint=" + encodeURIComponent(entryPoint);
-    }
+    }*/
     uri += "#sync";
 
     browser.loadURI(uri, {
Index: m041/mozilla-release/services/fxaccounts/FxAccountsStorage.jsm
===================================================================
--- m041.orig/mozilla-release/services/fxaccounts/FxAccountsStorage.jsm
+++ m041/mozilla-release/services/fxaccounts/FxAccountsStorage.jsm
@@ -163,7 +163,7 @@ FxAccountsStorageManager.prototype = {
     // We know we are initialized - this means our .cachedPlain is accurate
     // and doesn't need to be read (it was read if necessary by initialize).
     // So if there's no uid, there's no user signed in.
-    if (!("uid" in this.cachedPlain)) {
+    if (!("memberId" in this.cachedPlain)) {
       return null;
     }
     let result = {};
@@ -218,12 +218,12 @@ FxAccountsStorageManager.prototype = {
   // a different user, nor to set the user as signed-out.
   async updateAccountData(newFields) {
     await this._promiseInitialized;
-    if (!("uid" in this.cachedPlain)) {
+    if (!("memberId" in this.cachedPlain)) {
       // If this storage instance shows no logged in user, then you can't
       // update fields.
       throw new Error("No user is logged in");
     }
-    if (!newFields || "uid" in newFields) {
+    if (!newFields || "memberId" in newFields) {
       throw new Error("Can't change uid");
     }
     log.debug("_updateAccountData with items", Object.keys(newFields));
@@ -588,7 +588,7 @@ LoginManagerStorage.prototype = {
       if (existingLogins.length) {
         Services.logins.modifyLogin(existingLogins[0], login);
       } else {
-        Services.logins.addLogin(login);
+//        Services.logins.addLogin(login);
       }
       log.trace("finished write of user data to the login manager");
     } catch (ex) {
Index: m041/mozilla-release/services/fxaccounts/FxAccountsKeys.jsm
===================================================================
--- m041.orig/mozilla-release/services/fxaccounts/FxAccountsKeys.jsm
+++ m041/mozilla-release/services/fxaccounts/FxAccountsKeys.jsm
@@ -391,7 +391,7 @@ class FxAccountsKeys {
    * the derived value in order to support key rotation.
    */
   async _fetchScopedKeysMetadata(sessionToken) {
-    // Hard-coded list of scopes that we know about.
+/*    // Hard-coded list of scopes that we know about.
     // This list will probably grow in future.
     // Note that LEGACY_SCOPE_WEBEXT_SYNC is not in this list, it gets special-case handling below.
     const scopes = [SCOPE_OLD_SYNC, SCOPE_ECOSYSTEM_TELEMETRY].join(" ");
@@ -420,7 +420,7 @@ class FxAccountsKeys {
       ...scopedKeysMetadata[SCOPE_OLD_SYNC],
       identifier: LEGACY_SCOPE_WEBEXT_SYNC,
     };
-    return scopedKeysMetadata;
+    return scopedKeysMetadata;*/
   }
 
   /**
Index: m041/mozilla-release/services/sync/modules/UIState.jsm
===================================================================
--- m041.orig/mozilla-release/services/sync/modules/UIState.jsm
+++ m041/mozilla-release/services/sync/modules/UIState.jsm
@@ -171,9 +171,9 @@ const UIStateInternal = {
       } else {
         status = STATUS_SIGNED_IN;
       }
-      state.uid = userData.uid;
-      state.email = userData.email;
-      state.displayName = userData.displayName;
+      state.uid = "Magnusson Institute Member";
+      state.email = "Magnusson Institute Member";
+      state.displayName = "";
       // for better or worse, this module renames these attribues.
       state.avatarURL = userData.avatar;
       state.avatarIsDefault = userData.avatarDefault;
Index: m041/mozilla-release/browser/base/content/browser-sync.js
===================================================================
--- m041.orig/mozilla-release/browser/base/content/browser-sync.js
+++ m041/mozilla-release/browser/base/content/browser-sync.js
@@ -804,9 +804,9 @@ var gSync = {
 
   async openFxAManagePageFromFxaMenu(panel = undefined) {
     this.emitFxaToolbarTelemetry("account_settings", panel);
-    let entryPoint = "fxa_discoverability_native";
+    let entryPoint = "";
     if (this.isPanelInsideAppMenu(panel)) {
-      entryPoint = "fxa_app_menu";
+      entryPoint = "";
     }
     this.openFxAManagePage(entryPoint);
   },
Index: m041/mozilla-release/dom/push/PushService.jsm
===================================================================
--- m041.orig/mozilla-release/dom/push/PushService.jsm
+++ m041/mozilla-release/dom/push/PushService.jsm
@@ -594,10 +594,11 @@ var PushService = {
       this._db = this._service.newPushDB();
     }
 
-    return this._service.init(options, this, serverURI).then(() => {
+/*    return this._service.init(options, this, serverURI).then(() => {
       this._startObservers();
       return this._dropExpiredRegistrations();
-    });
+    });*/
+    return this._dropExpiredRegistrations();
   },
 
   /**
